
Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001460  08001460  00011460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001490  08001490  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001490  08001490  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001490  08001490  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001490  08001490  00011490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001494  08001494  00011494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  0800149c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800149c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006972  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011f4  00000000  00000000  0002699e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000380  00000000  00000000  00027b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002e8  00000000  00000000  00027f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cf9d  00000000  00000000  00028200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004537  00000000  00000000  0003519d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004255f  00000000  00000000  000396d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007bc33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a74  00000000  00000000  0007bcb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001448 	.word	0x08001448

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001448 	.word	0x08001448

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MY_System_Init>:
#include "my_stm32f0xx_cortex.h"
#include "my_stm32f0xx_rcc.h"
#include "my_stm32f0xx_gpio.h"

MY_Result_t MY_System_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
	/* ##################### Сброс настроек тактирования в значения по умолчанию ##################### */

	/* Устанавливаем бит HSION */
	RCC->CR |= (uint32_t)0x00000001U;
 8000226:	4b38      	ldr	r3, [pc, #224]	; (8000308 <MY_System_Init+0xe8>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b37      	ldr	r3, [pc, #220]	; (8000308 <MY_System_Init+0xe8>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	601a      	str	r2, [r3, #0]

	#if defined (STM32F051x8) || defined (STM32F058x8)

		/* Сброс бит SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE и MCOSEL[2:0] */
		RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000232:	4b35      	ldr	r3, [pc, #212]	; (8000308 <MY_System_Init+0xe8>)
 8000234:	685a      	ldr	r2, [r3, #4]
 8000236:	4b34      	ldr	r3, [pc, #208]	; (8000308 <MY_System_Init+0xe8>)
 8000238:	4934      	ldr	r1, [pc, #208]	; (800030c <MY_System_Init+0xec>)
 800023a:	400a      	ands	r2, r1
 800023c:	605a      	str	r2, [r3, #4]
		RCC->CFGR &= (uint32_t)0x08FFB80CU;

	#endif

	/* Сброс бит HSEON, CSSON и PLLON */
	RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800023e:	4b32      	ldr	r3, [pc, #200]	; (8000308 <MY_System_Init+0xe8>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b31      	ldr	r3, [pc, #196]	; (8000308 <MY_System_Init+0xe8>)
 8000244:	4932      	ldr	r1, [pc, #200]	; (8000310 <MY_System_Init+0xf0>)
 8000246:	400a      	ands	r2, r1
 8000248:	601a      	str	r2, [r3, #0]

	/* Сброс бит HSEBYP */
	RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800024a:	4b2f      	ldr	r3, [pc, #188]	; (8000308 <MY_System_Init+0xe8>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <MY_System_Init+0xe8>)
 8000250:	4930      	ldr	r1, [pc, #192]	; (8000314 <MY_System_Init+0xf4>)
 8000252:	400a      	ands	r2, r1
 8000254:	601a      	str	r2, [r3, #0]

	/* Сброс бит PLLSRC, PLLXTPRE и PLLMUL[3:0] */
	RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000256:	4b2c      	ldr	r3, [pc, #176]	; (8000308 <MY_System_Init+0xe8>)
 8000258:	685a      	ldr	r2, [r3, #4]
 800025a:	4b2b      	ldr	r3, [pc, #172]	; (8000308 <MY_System_Init+0xe8>)
 800025c:	492e      	ldr	r1, [pc, #184]	; (8000318 <MY_System_Init+0xf8>)
 800025e:	400a      	ands	r2, r1
 8000260:	605a      	str	r2, [r3, #4]

	/* Сброс бит PREDIV[3:0] */
	RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000262:	4b29      	ldr	r3, [pc, #164]	; (8000308 <MY_System_Init+0xe8>)
 8000264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000266:	4b28      	ldr	r3, [pc, #160]	; (8000308 <MY_System_Init+0xe8>)
 8000268:	210f      	movs	r1, #15
 800026a:	438a      	bics	r2, r1
 800026c:	62da      	str	r2, [r3, #44]	; 0x2c
		RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;

	#elif defined (STM32F051x8) || defined (STM32F058xx)

		/* Сброс бит USART1SW[1:0], I2C1SW, CECSW и ADCSW */
		RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 800026e:	4b26      	ldr	r3, [pc, #152]	; (8000308 <MY_System_Init+0xe8>)
 8000270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000272:	4b25      	ldr	r3, [pc, #148]	; (8000308 <MY_System_Init+0xe8>)
 8000274:	4929      	ldr	r1, [pc, #164]	; (800031c <MY_System_Init+0xfc>)
 8000276:	400a      	ands	r2, r1
 8000278:	631a      	str	r2, [r3, #48]	; 0x30
		#warning "No CPU model selected"

	#endif

	/* Сбрасываем бит HSI14 */
	RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800027a:	4b23      	ldr	r3, [pc, #140]	; (8000308 <MY_System_Init+0xe8>)
 800027c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800027e:	4b22      	ldr	r3, [pc, #136]	; (8000308 <MY_System_Init+0xe8>)
 8000280:	2101      	movs	r1, #1
 8000282:	438a      	bics	r2, r1
 8000284:	635a      	str	r2, [r3, #52]	; 0x34

	/* Отключаем все прерывания */
	RCC->CIR = 0x00000000U;
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <MY_System_Init+0xe8>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]

	/* Настраиваем Systick как основу для временных отсчётов и настраивает тик в 1ms (после сброса источник для тактирования - HSI) */
	MY_SysTick_Init(MY_RCC_HCLK_GetFreq()/1000U, 0U);
 800028c:	f001 f81a 	bl	80012c4 <MY_RCC_HCLK_GetFreq>
 8000290:	0002      	movs	r2, r0
 8000292:	23fa      	movs	r3, #250	; 0xfa
 8000294:	0099      	lsls	r1, r3, #2
 8000296:	0010      	movs	r0, r2
 8000298:	f7ff ff36 	bl	8000108 <__udivsi3>
 800029c:	0003      	movs	r3, r0
 800029e:	2100      	movs	r1, #0
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 f8d5 	bl	8000450 <MY_SysTick_Init>

	/* Включаем тактирование на SYSCFG & COMP */
	MY_UTILS_SetBitWithRead(&RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <MY_System_Init+0x100>)
 80002a8:	2101      	movs	r1, #1
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 f814 	bl	80012d8 <MY_UTILS_SetBitWithRead>

	/* Включаем тактирование на блок управления питанием */
	MY_UTILS_SetBitWithRead(&RCC->APB1ENR, RCC_APB1ENR_PWREN);
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	055b      	lsls	r3, r3, #21
 80002b4:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <MY_System_Init+0x104>)
 80002b6:	0019      	movs	r1, r3
 80002b8:	0010      	movs	r0, r2
 80002ba:	f001 f80d 	bl	80012d8 <MY_UTILS_SetBitWithRead>

	/* Устанавливаем приоритет прерывания SVC_IRQn (используется для работы ОС)*/
	MY_NVIC_Priority_Set(SVC_IRQn, 0);
 80002be:	2305      	movs	r3, #5
 80002c0:	425b      	negs	r3, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 f92b 	bl	8000520 <MY_NVIC_Priority_Set>

	/* Устанавливаем приоритет прерывания PendSV_IRQn (используется для работы ОС)*/
	MY_NVIC_Priority_Set(PendSV_IRQn, 0);
 80002ca:	2302      	movs	r3, #2
 80002cc:	425b      	negs	r3, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 f925 	bl	8000520 <MY_NVIC_Priority_Set>


	/* ##################### Инициализация системного тактирования  ##################### */

	if(MY_RCC_System_Init() != MY_Result_Ok)
 80002d6:	f000 fb29 	bl	800092c <MY_RCC_System_Init>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d010      	beq.n	8000300 <MY_System_Init+0xe0>
	{
		#ifdef STM32F0_DISCOVERY

			/* Аварийная индикация */
			MY_GPIO_Init(GPIOC, GPIO_PIN_8 | GPIO_PIN_9, MY_GPIO_Mode_Out, MY_GPIO_OType_PP, MY_GPIO_PuPd_NoPull, MY_GPIO_Speed_High);
 80002de:	23c0      	movs	r3, #192	; 0xc0
 80002e0:	0099      	lsls	r1, r3, #2
 80002e2:	4811      	ldr	r0, [pc, #68]	; (8000328 <MY_System_Init+0x108>)
 80002e4:	2303      	movs	r3, #3
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2300      	movs	r3, #0
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	2201      	movs	r2, #1
 80002f0:	f000 f940 	bl	8000574 <MY_GPIO_Init>
			MY_GPIO_SetPinHigh(GPIOC, GPIO_PIN_8 | GPIO_PIN_9);
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MY_System_Init+0x108>)
 80002f6:	22c0      	movs	r2, #192	; 0xc0
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	619a      	str	r2, [r3, #24]

		#endif

		return MY_Result_Error;
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <MY_System_Init+0xe2>
	}
	else
	{
		return MY_Result_Ok;
 8000300:	2300      	movs	r3, #0
	}
}
 8000302:	0018      	movs	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40021000 	.word	0x40021000
 800030c:	f8ffb80c 	.word	0xf8ffb80c
 8000310:	fef6ffff 	.word	0xfef6ffff
 8000314:	fffbffff 	.word	0xfffbffff
 8000318:	ffc0ffff 	.word	0xffc0ffff
 800031c:	fffffeac 	.word	0xfffffeac
 8000320:	40021018 	.word	0x40021018
 8000324:	4002101c 	.word	0x4002101c
 8000328:	48000800 	.word	0x48000800

0800032c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800032c:	b590      	push	{r4, r7, lr}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	0002      	movs	r2, r0
 8000334:	6039      	str	r1, [r7, #0]
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b7f      	cmp	r3, #127	; 0x7f
 8000340:	d932      	bls.n	80003a8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000342:	4a2f      	ldr	r2, [pc, #188]	; (8000400 <NVIC_SetPriority+0xd4>)
 8000344:	1dfb      	adds	r3, r7, #7
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	0019      	movs	r1, r3
 800034a:	230f      	movs	r3, #15
 800034c:	400b      	ands	r3, r1
 800034e:	3b08      	subs	r3, #8
 8000350:	089b      	lsrs	r3, r3, #2
 8000352:	3306      	adds	r3, #6
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	18d3      	adds	r3, r2, r3
 8000358:	3304      	adds	r3, #4
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	1dfa      	adds	r2, r7, #7
 800035e:	7812      	ldrb	r2, [r2, #0]
 8000360:	0011      	movs	r1, r2
 8000362:	2203      	movs	r2, #3
 8000364:	400a      	ands	r2, r1
 8000366:	00d2      	lsls	r2, r2, #3
 8000368:	21ff      	movs	r1, #255	; 0xff
 800036a:	4091      	lsls	r1, r2
 800036c:	000a      	movs	r2, r1
 800036e:	43d2      	mvns	r2, r2
 8000370:	401a      	ands	r2, r3
 8000372:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	019b      	lsls	r3, r3, #6
 8000378:	22ff      	movs	r2, #255	; 0xff
 800037a:	401a      	ands	r2, r3
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	0018      	movs	r0, r3
 8000382:	2303      	movs	r3, #3
 8000384:	4003      	ands	r3, r0
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800038a:	481d      	ldr	r0, [pc, #116]	; (8000400 <NVIC_SetPriority+0xd4>)
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	001c      	movs	r4, r3
 8000392:	230f      	movs	r3, #15
 8000394:	4023      	ands	r3, r4
 8000396:	3b08      	subs	r3, #8
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	430a      	orrs	r2, r1
 800039c:	3306      	adds	r3, #6
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	18c3      	adds	r3, r0, r3
 80003a2:	3304      	adds	r3, #4
 80003a4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003a6:	e027      	b.n	80003f8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a8:	4a16      	ldr	r2, [pc, #88]	; (8000404 <NVIC_SetPriority+0xd8>)
 80003aa:	1dfb      	adds	r3, r7, #7
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	b25b      	sxtb	r3, r3
 80003b0:	089b      	lsrs	r3, r3, #2
 80003b2:	33c0      	adds	r3, #192	; 0xc0
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	589b      	ldr	r3, [r3, r2]
 80003b8:	1dfa      	adds	r2, r7, #7
 80003ba:	7812      	ldrb	r2, [r2, #0]
 80003bc:	0011      	movs	r1, r2
 80003be:	2203      	movs	r2, #3
 80003c0:	400a      	ands	r2, r1
 80003c2:	00d2      	lsls	r2, r2, #3
 80003c4:	21ff      	movs	r1, #255	; 0xff
 80003c6:	4091      	lsls	r1, r2
 80003c8:	000a      	movs	r2, r1
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	401a      	ands	r2, r3
 80003ce:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	019b      	lsls	r3, r3, #6
 80003d4:	22ff      	movs	r2, #255	; 0xff
 80003d6:	401a      	ands	r2, r3
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	0018      	movs	r0, r3
 80003de:	2303      	movs	r3, #3
 80003e0:	4003      	ands	r3, r0
 80003e2:	00db      	lsls	r3, r3, #3
 80003e4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003e6:	4807      	ldr	r0, [pc, #28]	; (8000404 <NVIC_SetPriority+0xd8>)
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	089b      	lsrs	r3, r3, #2
 80003f0:	430a      	orrs	r2, r1
 80003f2:	33c0      	adds	r3, #192	; 0xc0
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	501a      	str	r2, [r3, r0]
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b003      	add	sp, #12
 80003fe:	bd90      	pop	{r4, r7, pc}
 8000400:	e000ed00 	.word	0xe000ed00
 8000404:	e000e100 	.word	0xe000e100

08000408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <SysTick_Config+0x40>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d901      	bls.n	800041e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800041a:	2301      	movs	r3, #1
 800041c:	e010      	b.n	8000440 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <SysTick_Config+0x44>)
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	3a01      	subs	r2, #1
 8000424:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000426:	2301      	movs	r3, #1
 8000428:	425b      	negs	r3, r3
 800042a:	2103      	movs	r1, #3
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ff7d 	bl	800032c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <SysTick_Config+0x44>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <SysTick_Config+0x44>)
 800043a:	2207      	movs	r2, #7
 800043c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800043e:	2300      	movs	r3, #0
}
 8000440:	0018      	movs	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}
 8000448:	00ffffff 	.word	0x00ffffff
 800044c:	e000e010 	.word	0xe000e010

08000450 <MY_SysTick_Init>:

/* Глобальная переменная, в которой содержится текущее значение счетчика таймера SysTick */
volatile uint32_t uwTick;

void MY_SysTick_Init(uint32_t ticks, uint32_t TickPriority)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
	/* Настраиваем источник тактирования для SysTick */
	MY_SysTick_ClockSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800045a:	2004      	movs	r0, #4
 800045c:	f000 f814 	bl	8000488 <MY_SysTick_ClockSourceConfig>

	/* Останавливаем таймер */
	MY_SysTick_SuspendTick();
 8000460:	f000 f842 	bl	80004e8 <MY_SysTick_SuspendTick>

	/* Настраиваем SysTick чтобы он давал прерывание раз в 1 мс. */
	SysTick_Config(ticks);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	0018      	movs	r0, r3
 8000468:	f7ff ffce 	bl	8000408 <SysTick_Config>

	/* Настраиваем приоритет прерывания SysTick IRQ */
	MY_NVIC_Priority_Set(SysTick_IRQn, TickPriority);
 800046c:	683a      	ldr	r2, [r7, #0]
 800046e:	2301      	movs	r3, #1
 8000470:	425b      	negs	r3, r3
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f000 f853 	bl	8000520 <MY_NVIC_Priority_Set>

	/* Включаем таймер */
	MY_SysTick_ResumeTick();
 800047a:	f000 f843 	bl	8000504 <MY_SysTick_ResumeTick>
}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b002      	add	sp, #8
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <MY_SysTick_ClockSourceConfig>:


void MY_SysTick_ClockSourceConfig(uint32_t ClockSource)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	if (ClockSource == SYSTICK_CLKSOURCE_HCLK)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b04      	cmp	r3, #4
 8000494:	d106      	bne.n	80004a4 <MY_SysTick_ClockSourceConfig+0x1c>
	{
		SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MY_SysTick_ClockSourceConfig+0x30>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <MY_SysTick_ClockSourceConfig+0x30>)
 800049c:	2104      	movs	r1, #4
 800049e:	430a      	orrs	r2, r1
 80004a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
	}
}
 80004a2:	e005      	b.n	80004b0 <MY_SysTick_ClockSourceConfig+0x28>
		SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <MY_SysTick_ClockSourceConfig+0x30>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <MY_SysTick_ClockSourceConfig+0x30>)
 80004aa:	2104      	movs	r1, #4
 80004ac:	438a      	bics	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	e000e010 	.word	0xe000e010

080004bc <MY_SysTick_IncTick>:


void MY_SysTick_IncTick(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	uwTick++;
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <MY_SysTick_IncTick+0x14>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	1c5a      	adds	r2, r3, #1
 80004c6:	4b02      	ldr	r3, [pc, #8]	; (80004d0 <MY_SysTick_IncTick+0x14>)
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000002c 	.word	0x2000002c

080004d4 <MY_SysTick_GetTick>:


uint32_t MY_SysTick_GetTick(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	return uwTick;
 80004d8:	4b02      	ldr	r3, [pc, #8]	; (80004e4 <MY_SysTick_GetTick+0x10>)
 80004da:	681b      	ldr	r3, [r3, #0]
}
 80004dc:	0018      	movs	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	2000002c 	.word	0x2000002c

080004e8 <MY_SysTick_SuspendTick>:


void MY_SysTick_SuspendTick(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	/* Выключаем прерывания от SysTick */
	CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <MY_SysTick_SuspendTick+0x18>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <MY_SysTick_SuspendTick+0x18>)
 80004f2:	2102      	movs	r1, #2
 80004f4:	438a      	bics	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	e000e010 	.word	0xe000e010

08000504 <MY_SysTick_ResumeTick>:


void MY_SysTick_ResumeTick(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	/* Включаем прерывания от SysTick */
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <MY_SysTick_ResumeTick+0x18>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <MY_SysTick_ResumeTick+0x18>)
 800050e:	2102      	movs	r1, #2
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	e000e010 	.word	0xe000e010

08000520 <MY_NVIC_Priority_Set>:
	NVIC_DisableIRQ(IRQn);
}


void MY_NVIC_Priority_Set(IRQn_Type IRQn, uint32_t PreemptPriority)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	0002      	movs	r2, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	701a      	strb	r2, [r3, #0]
	/* Устанавливаем приоритет пререывания */
	NVIC_SetPriority(IRQn, PreemptPriority);
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b25b      	sxtb	r3, r3
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff fef7 	bl	800032c <NVIC_SetPriority>
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}

08000546 <MY_Delay_ms>:
 */
#include "my_stm32f0xx_cortex.h"
#include "my_stm32f0xx_delay.h"

void MY_Delay_ms(__IO uint32_t delay_ms)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b084      	sub	sp, #16
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = MY_SysTick_GetTick();
 800054e:	f7ff ffc1 	bl	80004d4 <MY_SysTick_GetTick>
 8000552:	0003      	movs	r3, r0
 8000554:	60fb      	str	r3, [r7, #12]
	uint32_t wait = delay_ms;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	60bb      	str	r3, [r7, #8]
	if (wait < MAX_DELAY)
	{
		 wait++;
	}*/

	while((MY_SysTick_GetTick() - tickstart) < wait) { }
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	f7ff ffba 	bl	80004d4 <MY_SysTick_GetTick>
 8000560:	0002      	movs	r2, r0
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	429a      	cmp	r2, r3
 800056a:	d8f7      	bhi.n	800055c <MY_Delay_ms+0x16>
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b004      	add	sp, #16
 8000572:	bd80      	pop	{r7, pc}

08000574 <MY_GPIO_Init>:
/* Приватные функции */
static void MY_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, MY_GPIO_Mode_t GPIO_Mode, MY_GPIO_OType_t GPIO_OType, MY_GPIO_PuPd_t GPIO_PuPd, MY_GPIO_Speed_t GPIO_Speed);

/* Основная часть с функциями*/
void MY_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, MY_GPIO_Mode_t GPIO_Mode, MY_GPIO_OType_t GPIO_OType, MY_GPIO_PuPd_t GPIO_PuPd, MY_GPIO_Speed_t GPIO_Speed)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	000c      	movs	r4, r1
 800057e:	0010      	movs	r0, r2
 8000580:	0019      	movs	r1, r3
 8000582:	1cbb      	adds	r3, r7, #2
 8000584:	1c22      	adds	r2, r4, #0
 8000586:	801a      	strh	r2, [r3, #0]
 8000588:	1c7b      	adds	r3, r7, #1
 800058a:	1c02      	adds	r2, r0, #0
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	003b      	movs	r3, r7
 8000590:	1c0a      	adds	r2, r1, #0
 8000592:	701a      	strb	r2, [r3, #0]
	/* Проверка указанных пинов на правильность */
	if (GPIO_Pin == 0x00)
 8000594:	1cbb      	adds	r3, r7, #2
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d016      	beq.n	80005ca <MY_GPIO_Init+0x56>
	{
		return;
	}

	/* Включаем тактирование для порта GPIO */
	MY_GPIO_EnableClock(GPIOx);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 f8e0 	bl	8000764 <MY_GPIO_EnableClock>

	/* Инициализируем */
	MY_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80005a4:	003b      	movs	r3, r7
 80005a6:	781c      	ldrb	r4, [r3, #0]
 80005a8:	1c7b      	adds	r3, r7, #1
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	1cbb      	adds	r3, r7, #2
 80005ae:	8819      	ldrh	r1, [r3, #0]
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	231c      	movs	r3, #28
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2318      	movs	r3, #24
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	0023      	movs	r3, r4
 80005c4:	f000 f904 	bl	80007d0 <MY_GPIO_INT_Init>
 80005c8:	e000      	b.n	80005cc <MY_GPIO_Init+0x58>
		return;
 80005ca:	46c0      	nop			; (mov r8, r8)
}
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b003      	add	sp, #12
 80005d0:	bd90      	pop	{r4, r7, pc}

080005d2 <MY_GPIO_StructInit>:



void MY_GPIO_StructInit(GPIO_TypeDef* GPIOx, MY_GPIO_Init_t *GPIO_Init)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00U;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]

	/* Включаем тактирование порта GPIO */
	MY_GPIO_EnableClock(GPIOx);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 f8ba 	bl	8000764 <MY_GPIO_EnableClock>

	/* Настраиваем пины */
	while (((GPIO_Init->Pin) >> position) != RESET)
 80005f0:	e0ad      	b.n	800074e <MY_GPIO_StructInit+0x17c>
	{
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2101      	movs	r1, #1
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	4091      	lsls	r1, r2
 80005fc:	000a      	movs	r2, r1
 80005fe:	4013      	ands	r3, r2
 8000600:	613b      	str	r3, [r7, #16]

		if(iocurrent)
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d100      	bne.n	800060a <MY_GPIO_StructInit+0x38>
 8000608:	e09e      	b.n	8000748 <MY_GPIO_StructInit+0x176>
		{
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Alternate function mode selection */
			if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || \
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d003      	beq.n	800061a <MY_GPIO_StructInit+0x48>
			   (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
			if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || \
 8000616:	2b12      	cmp	r3, #18
 8000618:	d123      	bne.n	8000662 <MY_GPIO_StructInit+0x90>
			{
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	08da      	lsrs	r2, r3, #3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3208      	adds	r2, #8
 8000622:	0092      	lsls	r2, r2, #2
 8000624:	58d3      	ldr	r3, [r2, r3]
 8000626:	60fb      	str	r3, [r7, #12]

				CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	2207      	movs	r2, #7
 800062c:	4013      	ands	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	220f      	movs	r2, #15
 8000632:	409a      	lsls	r2, r3
 8000634:	0013      	movs	r3, r2
 8000636:	43da      	mvns	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	691a      	ldr	r2, [r3, #16]
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2107      	movs	r1, #7
 8000646:	400b      	ands	r3, r1
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	409a      	lsls	r2, r3
 800064c:	0013      	movs	r3, r2
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4313      	orrs	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]

				GPIOx->AFR[position >> 3U] = temp;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	08da      	lsrs	r2, r3, #3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3208      	adds	r2, #8
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	68f9      	ldr	r1, [r7, #12]
 8000660:	50d1      	str	r1, [r2, r3]
			}


			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	60fb      	str	r3, [r7, #12]

			CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	2203      	movs	r2, #3
 800066e:	409a      	lsls	r2, r3
 8000670:	0013      	movs	r3, r2
 8000672:	43da      	mvns	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4013      	ands	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
			SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	2203      	movs	r2, #3
 8000680:	401a      	ands	r2, r3
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	409a      	lsls	r2, r3
 8000688:	0013      	movs	r3, r2
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	4313      	orrs	r3, r2
 800068e:	60fb      	str	r3, [r7, #12]

			GPIOx->MODER = temp;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	601a      	str	r2, [r3, #0]


			/* In case of Output or Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || \
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d00b      	beq.n	80006b6 <MY_GPIO_StructInit+0xe4>
			    (GPIO_Init->Mode == GPIO_MODE_AF_PP) || \
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	685b      	ldr	r3, [r3, #4]
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || \
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d007      	beq.n	80006b6 <MY_GPIO_StructInit+0xe4>
				(GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || \
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
			    (GPIO_Init->Mode == GPIO_MODE_AF_PP) || \
 80006aa:	2b11      	cmp	r3, #17
 80006ac:	d003      	beq.n	80006b6 <MY_GPIO_StructInit+0xe4>
				(GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
				(GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || \
 80006b2:	2b12      	cmp	r3, #18
 80006b4:	d130      	bne.n	8000718 <MY_GPIO_StructInit+0x146>
			{
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	60fb      	str	r3, [r7, #12]

				CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	2203      	movs	r2, #3
 80006c2:	409a      	lsls	r2, r3
 80006c4:	0013      	movs	r3, r2
 80006c6:	43da      	mvns	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	409a      	lsls	r2, r3
 80006d8:	0013      	movs	r3, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	4313      	orrs	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]

				GPIOx->OSPEEDR = temp;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	609a      	str	r2, [r3, #8]


				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	60fb      	str	r3, [r7, #12]

				CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80006ec:	2201      	movs	r2, #1
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	409a      	lsls	r2, r3
 80006f2:	0013      	movs	r3, r2
 80006f4:	43da      	mvns	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	091b      	lsrs	r3, r3, #4
 8000702:	2201      	movs	r2, #1
 8000704:	401a      	ands	r2, r3
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	409a      	lsls	r2, r3
 800070a:	0013      	movs	r3, r2
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	4313      	orrs	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]

				GPIOx->OTYPER = temp;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	605a      	str	r2, [r3, #4]
			}

			/* Activate the Pull-up or Pull down resistor for the current IO */
			temp = GPIOx->PUPDR;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	60fb      	str	r3, [r7, #12]

			CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	2203      	movs	r2, #3
 8000724:	409a      	lsls	r2, r3
 8000726:	0013      	movs	r3, r2
 8000728:	43da      	mvns	r2, r3
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
			SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	409a      	lsls	r2, r3
 800073a:	0013      	movs	r3, r2
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	4313      	orrs	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]

			GPIOx->PUPDR = temp;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	60da      	str	r2, [r3, #12]
		}

		position++;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != RESET)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	40da      	lsrs	r2, r3
 8000756:	1e13      	subs	r3, r2, #0
 8000758:	d000      	beq.n	800075c <MY_GPIO_StructInit+0x18a>
 800075a:	e74a      	b.n	80005f2 <MY_GPIO_StructInit+0x20>

	}
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b006      	add	sp, #24
 8000762:	bd80      	pop	{r7, pc}

08000764 <MY_GPIO_EnableClock>:
	}
}


void MY_GPIO_EnableClock(GPIO_TypeDef* GPIOx)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpreg;

	/* Устанавливает бит в позиции [RCC_AHBENR]
	   Порты перечисляются с 17 бита и перечисляются по 22
	   1 << номер порта + 17 (позиция первого - GPIOA) */
	RCC->AHBENR |= (1 << (MY_GPIO_GetPortSource(GPIOx) + 17));
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f81e 	bl	80007b0 <MY_GPIO_GetPortSource>
 8000774:	0003      	movs	r3, r0
 8000776:	3311      	adds	r3, #17
 8000778:	2201      	movs	r2, #1
 800077a:	409a      	lsls	r2, r3
 800077c:	0011      	movs	r1, r2
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MY_GPIO_EnableClock+0x48>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MY_GPIO_EnableClock+0x48>)
 8000784:	430a      	orrs	r2, r1
 8000786:	615a      	str	r2, [r3, #20]

	tmpreg = READ_BIT(RCC->AHBENR, (1 << (MY_GPIO_GetPortSource(GPIOx) + 17)));
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MY_GPIO_EnableClock+0x48>)
 800078a:	695c      	ldr	r4, [r3, #20]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f80e 	bl	80007b0 <MY_GPIO_GetPortSource>
 8000794:	0003      	movs	r3, r0
 8000796:	3311      	adds	r3, #17
 8000798:	2201      	movs	r2, #1
 800079a:	409a      	lsls	r2, r3
 800079c:	0013      	movs	r3, r2
 800079e:	4023      	ands	r3, r4
 80007a0:	60fb      	str	r3, [r7, #12]

    ((void)(tmpreg));
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b005      	add	sp, #20
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	40021000 	.word	0x40021000

080007b0 <MY_GPIO_GetPortSource>:
	RCC->AHBENR &= ~(1 << (MY_GPIO_GetPortSource(GPIOx) + 17));
}


uint16_t MY_GPIO_GetPortSource(GPIO_TypeDef* GPIOx)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	/* Получаем номер порта */
	/* Смещение от порта GPIOA = Разница в адресах 2 GPIO */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	22b8      	movs	r2, #184	; 0xb8
 80007bc:	0612      	lsls	r2, r2, #24
 80007be:	4694      	mov	ip, r2
 80007c0:	4463      	add	r3, ip
 80007c2:	0a9b      	lsrs	r3, r3, #10
 80007c4:	b29b      	uxth	r3, r3
}
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <MY_GPIO_INT_Init>:


/********************* Приватные функции ****************************/

static void MY_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, MY_GPIO_Mode_t GPIO_Mode, MY_GPIO_OType_t GPIO_OType, MY_GPIO_PuPd_t GPIO_PuPd, MY_GPIO_Speed_t GPIO_Speed)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	000c      	movs	r4, r1
 80007da:	0010      	movs	r0, r2
 80007dc:	0019      	movs	r1, r3
 80007de:	1cbb      	adds	r3, r7, #2
 80007e0:	1c22      	adds	r2, r4, #0
 80007e2:	801a      	strh	r2, [r3, #0]
 80007e4:	1c7b      	adds	r3, r7, #1
 80007e6:	1c02      	adds	r2, r0, #0
 80007e8:	701a      	strb	r2, [r3, #0]
 80007ea:	003b      	movs	r3, r7
 80007ec:	1c0a      	adds	r2, r1, #0
 80007ee:	701a      	strb	r2, [r3, #0]
	uint8_t pinpos; //текущий номер пина в цикле инициализации
	uint8_t ptr = MY_GPIO_GetPortSource(GPIOx); //вычисляем номер порта в котором идет инициализация
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff ffdc 	bl	80007b0 <MY_GPIO_GetPortSource>
 80007f8:	0003      	movs	r3, r0
 80007fa:	001a      	movs	r2, r3
 80007fc:	230e      	movs	r3, #14
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	701a      	strb	r2, [r3, #0]

	/* Делаем проход в цикле через все 16 (0x10) пинов */
	for (pinpos = 0; pinpos < 0x10; pinpos++)
 8000802:	230f      	movs	r3, #15
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e082      	b.n	8000912 <MY_GPIO_INT_Init+0x142>
	{
		/* Если пин не находится в списке инициализируемых - пропускаем итерацию */
		if ((GPIO_Pin & (1 << pinpos)) == 0)
 800080c:	1cbb      	adds	r3, r7, #2
 800080e:	881a      	ldrh	r2, [r3, #0]
 8000810:	230f      	movs	r3, #15
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	411a      	asrs	r2, r3
 8000818:	0013      	movs	r3, r2
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	d071      	beq.n	8000904 <MY_GPIO_INT_Init+0x134>
		{
			continue;
		}

		/* Если пин в списке используемых */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8000820:	240e      	movs	r4, #14
 8000822:	193b      	adds	r3, r7, r4
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <MY_GPIO_INT_Init+0x158>)
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	5ad3      	ldrh	r3, [r2, r3]
 800082c:	b21a      	sxth	r2, r3
 800082e:	200f      	movs	r0, #15
 8000830:	183b      	adds	r3, r7, r0
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2101      	movs	r1, #1
 8000836:	4099      	lsls	r1, r3
 8000838:	000b      	movs	r3, r1
 800083a:	b21b      	sxth	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b219      	sxth	r1, r3
 8000840:	193b      	adds	r3, r7, r4
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	b289      	uxth	r1, r1
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <MY_GPIO_INT_Init+0x158>)
 8000848:	0052      	lsls	r2, r2, #1
 800084a:	52d1      	strh	r1, [r2, r3]

		/* Настраиваем [GPIOx_PUPDR] */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	183a      	adds	r2, r7, r0
 8000852:	7812      	ldrb	r2, [r2, #0]
 8000854:	0052      	lsls	r2, r2, #1
 8000856:	2103      	movs	r1, #3
 8000858:	4091      	lsls	r1, r2
 800085a:	000a      	movs	r2, r1
 800085c:	43d2      	mvns	r2, r2
 800085e:	4013      	ands	r3, r2
 8000860:	2220      	movs	r2, #32
 8000862:	18ba      	adds	r2, r7, r2
 8000864:	7811      	ldrb	r1, [r2, #0]
 8000866:	183a      	adds	r2, r7, r0
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	0052      	lsls	r2, r2, #1
 800086c:	4091      	lsls	r1, r2
 800086e:	000a      	movs	r2, r1
 8000870:	431a      	orrs	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60da      	str	r2, [r3, #12]

		/* Настраиваем [GPIOx_MODER] */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	183a      	adds	r2, r7, r0
 800087c:	7812      	ldrb	r2, [r2, #0]
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	2103      	movs	r1, #3
 8000882:	4091      	lsls	r1, r2
 8000884:	000a      	movs	r2, r1
 8000886:	43d2      	mvns	r2, r2
 8000888:	4013      	ands	r3, r2
 800088a:	1c7a      	adds	r2, r7, #1
 800088c:	7811      	ldrb	r1, [r2, #0]
 800088e:	183a      	adds	r2, r7, r0
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	4091      	lsls	r1, r2
 8000896:	000a      	movs	r2, r1
 8000898:	431a      	orrs	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]

		/* Установка параметров только если режим Output или Alternate */
		if (GPIO_Mode == MY_GPIO_Mode_Out || GPIO_Mode == MY_GPIO_Mode_AF)
 800089e:	1c7b      	adds	r3, r7, #1
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d003      	beq.n	80008ae <MY_GPIO_INT_Init+0xde>
 80008a6:	1c7b      	adds	r3, r7, #1
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d12b      	bne.n	8000906 <MY_GPIO_INT_Init+0x136>
		{
			/* Установка [GPIOx_OTYPER] */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	200f      	movs	r0, #15
 80008b4:	183a      	adds	r2, r7, r0
 80008b6:	7812      	ldrb	r2, [r2, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	4091      	lsls	r1, r2
 80008bc:	000a      	movs	r2, r1
 80008be:	b292      	uxth	r2, r2
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	4013      	ands	r3, r2
 80008c4:	003a      	movs	r2, r7
 80008c6:	7811      	ldrb	r1, [r2, #0]
 80008c8:	183a      	adds	r2, r7, r0
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	4091      	lsls	r1, r2
 80008ce:	000a      	movs	r2, r1
 80008d0:	b292      	uxth	r2, r2
 80008d2:	431a      	orrs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	605a      	str	r2, [r3, #4]

			/* Установка [GPIOx_OSPEEDR] */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	183a      	adds	r2, r7, r0
 80008de:	7812      	ldrb	r2, [r2, #0]
 80008e0:	0052      	lsls	r2, r2, #1
 80008e2:	2103      	movs	r1, #3
 80008e4:	4091      	lsls	r1, r2
 80008e6:	000a      	movs	r2, r1
 80008e8:	43d2      	mvns	r2, r2
 80008ea:	4013      	ands	r3, r2
 80008ec:	2224      	movs	r2, #36	; 0x24
 80008ee:	18ba      	adds	r2, r7, r2
 80008f0:	7811      	ldrb	r1, [r2, #0]
 80008f2:	183a      	adds	r2, r7, r0
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	0052      	lsls	r2, r2, #1
 80008f8:	4091      	lsls	r1, r2
 80008fa:	000a      	movs	r2, r1
 80008fc:	431a      	orrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	e000      	b.n	8000906 <MY_GPIO_INT_Init+0x136>
			continue;
 8000904:	46c0      	nop			; (mov r8, r8)
	for (pinpos = 0; pinpos < 0x10; pinpos++)
 8000906:	210f      	movs	r1, #15
 8000908:	187b      	adds	r3, r7, r1
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	187b      	adds	r3, r7, r1
 800090e:	3201      	adds	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	230f      	movs	r3, #15
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d800      	bhi.n	800091e <MY_GPIO_INT_Init+0x14e>
 800091c:	e776      	b.n	800080c <MY_GPIO_INT_Init+0x3c>
		}
	}
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b005      	add	sp, #20
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	20000020 	.word	0x20000020

0800092c <MY_RCC_System_Init>:
#include "my_stm32f0xx_rcc.h"

extern uint32_t SystemCoreClock;

MY_Result_t MY_RCC_System_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b092      	sub	sp, #72	; 0x48
 8000930:	af00      	add	r7, sp, #0
	/* Структуры для настроек */
	MY_RCC_Clock_Init_t  RCC_Clock_InitStruct;
	MY_RCC_Osc_Init_t 	 RCC_Osc_InitStruct;

	/* Устанавливаем из настроек источник тактирования */
	RCC_Osc_InitStruct.OscillatorType = RCC_OSCILLATORTYPE;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]

	/* Устанавливаем параметры осциллятора HSE или HSI*/
	if(RCC_Osc_InitStruct.OscillatorType == RCC_OSCILLATORTYPE_HSE)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d109      	bne.n	8000954 <MY_RCC_System_Init+0x28>
	{
		RCC_Osc_InitStruct.HSE_State = RCC_HSE_ON;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2201      	movs	r2, #1
 8000944:	605a      	str	r2, [r3, #4]
		RCC_Osc_InitStruct.HSI_State = RCC_HSI_OFF;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
		RCC_Osc_InitStruct.PLL.PLL_State = RCC_PLL_NONE;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
 8000952:	e00f      	b.n	8000974 <MY_RCC_System_Init+0x48>
	}
	else if(RCC_Osc_InitStruct.OscillatorType == RCC_OSCILLATORTYPE_HSI)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d10b      	bne.n	8000974 <MY_RCC_System_Init+0x48>
	{
		RCC_Osc_InitStruct.HSE_State = RCC_HSE_OFF;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
		RCC_Osc_InitStruct.HSI_State = RCC_HSI_ON;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2201      	movs	r2, #1
 8000966:	60da      	str	r2, [r3, #12]
		RCC_Osc_InitStruct.PLL.PLL_State = RCC_PLL_NONE;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
		RCC_Osc_InitStruct.HSI_CalibrationValue = RCC_HSICALIBRATION_VALUE;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2210      	movs	r2, #16
 8000972:	611a      	str	r2, [r3, #16]
	}

	/* Если используется PLL в качестве источника тактового сигнала для SYSCLK */
	if(RCC_SYSCLK_SOURCE == RCC_SYSCLK_SOURCE_PLL)
	{
		RCC_Osc_InitStruct.PLL.PLL_Source = RCC_PLLSOURCE;
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	0252      	lsls	r2, r2, #9
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
		RCC_Osc_InitStruct.PLL.PLL_PREDIV = RCC_PLL_PREDIV;
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	631a      	str	r2, [r3, #48]	; 0x30
		RCC_Osc_InitStruct.PLL.PLL_MUL = RCC_PLL_MUL;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0352      	lsls	r2, r2, #13
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
		RCC_Osc_InitStruct.PLL.PLL_State = RCC_PLL_ON;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2202      	movs	r2, #2
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Сбрасываем настройки тактирования к дефолту */
	MY_RCC_System_DeInit();
 8000990:	f000 f824 	bl	80009dc <MY_RCC_System_DeInit>

	/* Производим настройку осциллятора */
	if(MY_RCC_Osc_Config(&RCC_Osc_InitStruct)!= MY_Result_Ok)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	0018      	movs	r0, r3
 8000998:	f000 f858 	bl	8000a4c <MY_RCC_Osc_Config>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MY_RCC_System_Init+0x78>
	{
		return MY_Result_Error;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e016      	b.n	80009d2 <MY_RCC_System_Init+0xa6>
	}

	/* Настраиваем инициализируемые шины CPU, AHB и APB*/
	RCC_Clock_InitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80009a4:	2138      	movs	r1, #56	; 0x38
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
	RCC_Clock_InitStruct.SYSCLK_Source = RCC_SYSCLK_SOURCE;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2202      	movs	r2, #2
 80009b0:	605a      	str	r2, [r3, #4]
	RCC_Clock_InitStruct.AHBCLK_Divider = RCC_AHB_DIV;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
	RCC_Clock_InitStruct.APB1CLK_Divider = RCC_APB1_DIV;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]

	/* Инициализируем тактирование шин CPU, AHB и APB */
	if(MY_RCC_Clock_Config(&RCC_Clock_InitStruct, FLASH_LATENCY) != MY_Result_Ok)
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2101      	movs	r1, #1
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fb32 	bl	800102c <MY_RCC_Clock_Config>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MY_RCC_System_Init+0xa4>
	{
		return MY_Result_Error;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <MY_RCC_System_Init+0xa6>
	}

	return MY_Result_Ok;
 80009d0:	2300      	movs	r3, #0

}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b012      	add	sp, #72	; 0x48
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <MY_RCC_System_DeInit>:


void MY_RCC_System_DeInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	/* Устанавливаем бит HSION, HSITRIM[4:0] к значениям устанавливаемым при сбросе */
	SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4);
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 80009e6:	2181      	movs	r1, #129	; 0x81
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]

	/* Сбрасываем биты SW[1:0], HPRE[3:0], PPRE[2:0] и MCOSEL[2:0] */
	CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 80009f2:	4911      	ldr	r1, [pc, #68]	; (8000a38 <MY_RCC_System_DeInit+0x5c>)
 80009f4:	400a      	ands	r2, r1
 80009f6:	605a      	str	r2, [r3, #4]

	/* Сбрасываем биты HSEON, CSSON, PLLON */
	CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 80009fe:	490f      	ldr	r1, [pc, #60]	; (8000a3c <MY_RCC_System_DeInit+0x60>)
 8000a00:	400a      	ands	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]

	/* Сбрасываем бит HSEBYP */
	CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <MY_RCC_System_DeInit+0x64>)
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	601a      	str	r2, [r3, #0]

	/* Сбрасываем регистр CFGR */
	CLEAR_REG(RCC->CFGR);
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]

	/* Сбрасываем регистр CFGR2 */
	CLEAR_REG(RCC->CFGR2);
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Сбрасываем регистр CFGR3 */
	CLEAR_REG(RCC->CFGR3);
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30

	/* Отключаем все прерывания */
	CLEAR_REG(RCC->CIR);
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <MY_RCC_System_DeInit+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]

	/* Обновление глобальной переменной SystemCoreClock */
	SystemCoreClock = HSI_VALUE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MY_RCC_System_DeInit+0x68>)
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <MY_RCC_System_DeInit+0x6c>)
 8000a2c:	601a      	str	r2, [r3, #0]
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	f0fff80c 	.word	0xf0fff80c
 8000a3c:	fef6ffff 	.word	0xfef6ffff
 8000a40:	fffbffff 	.word	0xfffbffff
 8000a44:	20000000 	.word	0x20000000
 8000a48:	007a1200 	.word	0x007a1200

08000a4c <MY_RCC_Osc_Config>:


MY_Result_t	MY_RCC_Osc_Config(MY_RCC_Osc_Init_t *RCC_Osc_InitStruct)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	/* Переменная используемая для отсчёта таймаутов */
	uint32_t tickstart = 0U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]

	/*------------------------------- Настройка HSE -------------------------------*/
	/* Если для настройки выбран осциллятор HSE */
	if(((RCC_Osc_InitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d100      	bne.n	8000a64 <MY_RCC_Osc_Config+0x18>
 8000a62:	e08d      	b.n	8000b80 <MY_RCC_Osc_Config+0x134>
	{
		/* Когда HSE используется в качестве системного источника тактирования или источником тактового сигнала для PLL когда он используется в качестве основного осциллятора */
		if((MY_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) || \
 8000a64:	4bc0      	ldr	r3, [pc, #768]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	220c      	movs	r2, #12
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d00e      	beq.n	8000a8e <MY_RCC_Osc_Config+0x42>
		  ((MY_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (MY_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a70:	4bbd      	ldr	r3, [pc, #756]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	220c      	movs	r2, #12
 8000a76:	4013      	ands	r3, r2
		if((MY_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) || \
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d116      	bne.n	8000aaa <MY_RCC_Osc_Config+0x5e>
		  ((MY_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (MY_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a7c:	4bba      	ldr	r3, [pc, #744]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	025b      	lsls	r3, r3, #9
 8000a84:	401a      	ands	r2, r3
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	025b      	lsls	r3, r3, #9
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d10d      	bne.n	8000aaa <MY_RCC_Osc_Config+0x5e>
		{
			/* Если он используется и до этого не был включен */
			if((MY_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_Osc_InitStruct->HSE_State == RCC_HSE_OFF))
 8000a8e:	4bb6      	ldr	r3, [pc, #728]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	029b      	lsls	r3, r3, #10
 8000a96:	4013      	ands	r3, r2
 8000a98:	d100      	bne.n	8000a9c <MY_RCC_Osc_Config+0x50>
 8000a9a:	e070      	b.n	8000b7e <MY_RCC_Osc_Config+0x132>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d000      	beq.n	8000aa6 <MY_RCC_Osc_Config+0x5a>
 8000aa4:	e06b      	b.n	8000b7e <MY_RCC_Osc_Config+0x132>
			{
				return MY_Result_Error;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e2b2      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			}
		}
		else
		{
			/* Устанавливаем новое состояние для HSE */
			MY_RCC_HSE_CONFIG(RCC_Osc_InitStruct->HSE_State);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d107      	bne.n	8000ac2 <MY_RCC_Osc_Config+0x76>
 8000ab2:	4bad      	ldr	r3, [pc, #692]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4bac      	ldr	r3, [pc, #688]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0249      	lsls	r1, r1, #9
 8000abc:	430a      	orrs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e02f      	b.n	8000b22 <MY_RCC_Osc_Config+0xd6>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10c      	bne.n	8000ae4 <MY_RCC_Osc_Config+0x98>
 8000aca:	4ba7      	ldr	r3, [pc, #668]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4ba6      	ldr	r3, [pc, #664]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000ad0:	49a6      	ldr	r1, [pc, #664]	; (8000d6c <MY_RCC_Osc_Config+0x320>)
 8000ad2:	400a      	ands	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	4ba4      	ldr	r3, [pc, #656]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4ba3      	ldr	r3, [pc, #652]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000adc:	49a4      	ldr	r1, [pc, #656]	; (8000d70 <MY_RCC_Osc_Config+0x324>)
 8000ade:	400a      	ands	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e01e      	b.n	8000b22 <MY_RCC_Osc_Config+0xd6>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b05      	cmp	r3, #5
 8000aea:	d10e      	bne.n	8000b0a <MY_RCC_Osc_Config+0xbe>
 8000aec:	4b9e      	ldr	r3, [pc, #632]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b9d      	ldr	r3, [pc, #628]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	02c9      	lsls	r1, r1, #11
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	4b9b      	ldr	r3, [pc, #620]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b9a      	ldr	r3, [pc, #616]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0249      	lsls	r1, r1, #9
 8000b04:	430a      	orrs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e00b      	b.n	8000b22 <MY_RCC_Osc_Config+0xd6>
 8000b0a:	4b97      	ldr	r3, [pc, #604]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b96      	ldr	r3, [pc, #600]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b10:	4996      	ldr	r1, [pc, #600]	; (8000d6c <MY_RCC_Osc_Config+0x320>)
 8000b12:	400a      	ands	r2, r1
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	4b94      	ldr	r3, [pc, #592]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b93      	ldr	r3, [pc, #588]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b1c:	4994      	ldr	r1, [pc, #592]	; (8000d70 <MY_RCC_Osc_Config+0x324>)
 8000b1e:	400a      	ands	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]

			/* Проверяем состояние HSE в структуре */
			if(RCC_Osc_InitStruct->HSE_State != RCC_HSE_OFF)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d014      	beq.n	8000b54 <MY_RCC_Osc_Config+0x108>
			{
				/* Помещаем значение для отчёта таймаута */
				tickstart = MY_SysTick_GetTick();
 8000b2a:	f7ff fcd3 	bl	80004d4 <MY_SysTick_GetTick>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	60bb      	str	r3, [r7, #8]

				/* Ждём пока RCC взведёт флаг HSE ready */
				while(MY_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b32:	e008      	b.n	8000b46 <MY_RCC_Osc_Config+0xfa>
				{
					/* Если истёк таймаут - выходим с ошибкой */
					if((MY_SysTick_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b34:	f7ff fcce 	bl	80004d4 <MY_SysTick_GetTick>
 8000b38:	0002      	movs	r2, r0
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b64      	cmp	r3, #100	; 0x64
 8000b40:	d901      	bls.n	8000b46 <MY_RCC_Osc_Config+0xfa>
					{
						return MY_Result_Timeout;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e264      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
				while(MY_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b46:	4b88      	ldr	r3, [pc, #544]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	029b      	lsls	r3, r3, #10
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d0f0      	beq.n	8000b34 <MY_RCC_Osc_Config+0xe8>
 8000b52:	e015      	b.n	8000b80 <MY_RCC_Osc_Config+0x134>
				}
			}
			else
			{
				/* Помещаем значение для отчёта таймаута */
				tickstart = MY_SysTick_GetTick();
 8000b54:	f7ff fcbe 	bl	80004d4 <MY_SysTick_GetTick>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	60bb      	str	r3, [r7, #8]

				/* Ждём пока RCC снимет флаг HSE ready */
				while(MY_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b5c:	e008      	b.n	8000b70 <MY_RCC_Osc_Config+0x124>
				{
					/* Если истёк таймаут - выходим с ошибкой */
					if((MY_SysTick_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b5e:	f7ff fcb9 	bl	80004d4 <MY_SysTick_GetTick>
 8000b62:	0002      	movs	r2, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	2b64      	cmp	r3, #100	; 0x64
 8000b6a:	d901      	bls.n	8000b70 <MY_RCC_Osc_Config+0x124>
					{
						return MY_Result_Timeout;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e24f      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
				while(MY_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b70:	4b7d      	ldr	r3, [pc, #500]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	029b      	lsls	r3, r3, #10
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d1f0      	bne.n	8000b5e <MY_RCC_Osc_Config+0x112>
 8000b7c:	e000      	b.n	8000b80 <MY_RCC_Osc_Config+0x134>
			if((MY_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_Osc_InitStruct->HSE_State == RCC_HSE_OFF))
 8000b7e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/*----------------------------- Настройка HSI -----------------------------*/
	/* Если для настройки выбран внутренний осциллятор HSI */
	if(((RCC_Osc_InitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2202      	movs	r2, #2
 8000b86:	4013      	ands	r3, r2
 8000b88:	d100      	bne.n	8000b8c <MY_RCC_Osc_Config+0x140>
 8000b8a:	e069      	b.n	8000c60 <MY_RCC_Osc_Config+0x214>
	{
		/* Когда HSI используется в качестве системного источника тактирования или источником тактового сигнала для PLL когда он используется в качестве основного осциллятора */
		if((MY_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000b8c:	4b76      	ldr	r3, [pc, #472]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	220c      	movs	r2, #12
 8000b92:	4013      	ands	r3, r2
 8000b94:	d00b      	beq.n	8000bae <MY_RCC_Osc_Config+0x162>
		  ((MY_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (MY_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b96:	4b74      	ldr	r3, [pc, #464]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	4013      	ands	r3, r2
		if((MY_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000b9e:	2b08      	cmp	r3, #8
 8000ba0:	d11c      	bne.n	8000bdc <MY_RCC_Osc_Config+0x190>
		  ((MY_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (MY_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ba2:	4b71      	ldr	r3, [pc, #452]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	025b      	lsls	r3, r3, #9
 8000baa:	4013      	ands	r3, r2
 8000bac:	d116      	bne.n	8000bdc <MY_RCC_Osc_Config+0x190>
		{
			/* В этом случае запрещено его выключать и дальнейшая настройка не возможна */
			if((MY_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_Osc_InitStruct->HSI_State != RCC_HSI_ON))
 8000bae:	4b6e      	ldr	r3, [pc, #440]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d005      	beq.n	8000bc4 <MY_RCC_Osc_Config+0x178>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d001      	beq.n	8000bc4 <MY_RCC_Osc_Config+0x178>
			{
				return MY_Result_Error;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e225      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			}
			/* Иначе доступна только калибровка */
			else
			{
				/* Подстраиваем значение калибровки High Speed oscillator (HSI) */
				MY_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_Osc_InitStruct->HSI_CalibrationValue);
 8000bc4:	4b68      	ldr	r3, [pc, #416]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	22f8      	movs	r2, #248	; 0xf8
 8000bca:	4393      	bics	r3, r2
 8000bcc:	0019      	movs	r1, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	00da      	lsls	r2, r3, #3
 8000bd4:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]
			if((MY_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_Osc_InitStruct->HSI_State != RCC_HSI_ON))
 8000bda:	e041      	b.n	8000c60 <MY_RCC_Osc_Config+0x214>
			}
		}
		else
		{
			/* Проверяем состояние HSI в структуре */
			if(RCC_Osc_InitStruct->HSI_State != RCC_HSI_OFF)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d024      	beq.n	8000c2e <MY_RCC_Osc_Config+0x1e2>
			{
				/* Включаем внутренний High Speed oscillator (HSI) */
				MY_RCC_HSI_ENABLE();
 8000be4:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b5f      	ldr	r3, [pc, #380]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]

				/* Помещаем значение для отчёта таймаута */
				tickstart = MY_SysTick_GetTick();
 8000bf0:	f7ff fc70 	bl	80004d4 <MY_SysTick_GetTick>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	60bb      	str	r3, [r7, #8]

				/* Ждём пока RCC не взведёт флаг готовности HSI */
				while(MY_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf8:	e008      	b.n	8000c0c <MY_RCC_Osc_Config+0x1c0>
				{
					/* Если истёк таймаут - выходим с ошибкой */
					if((MY_SysTick_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bfa:	f7ff fc6b 	bl	80004d4 <MY_SysTick_GetTick>
 8000bfe:	0002      	movs	r2, r0
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d901      	bls.n	8000c0c <MY_RCC_Osc_Config+0x1c0>
					{
						return MY_Result_Timeout;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e201      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
				while(MY_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0c:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2202      	movs	r2, #2
 8000c12:	4013      	ands	r3, r2
 8000c14:	d0f1      	beq.n	8000bfa <MY_RCC_Osc_Config+0x1ae>
					}
				}

				/* Подстраиваем значение калибровки High Speed oscillator (HSI) */
				MY_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_Osc_InitStruct->HSI_CalibrationValue);
 8000c16:	4b54      	ldr	r3, [pc, #336]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	22f8      	movs	r2, #248	; 0xf8
 8000c1c:	4393      	bics	r3, r2
 8000c1e:	0019      	movs	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	00da      	lsls	r2, r3, #3
 8000c26:	4b50      	ldr	r3, [pc, #320]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	e018      	b.n	8000c60 <MY_RCC_Osc_Config+0x214>
			}
			else
			{
				/* Отключаем High Speed oscillator (HSI) */
				MY_RCC_HSI_DISABLE();
 8000c2e:	4b4e      	ldr	r3, [pc, #312]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b4d      	ldr	r3, [pc, #308]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	438a      	bics	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]

				/* Помещаем значение для отчёта таймаута */
				tickstart = MY_SysTick_GetTick();
 8000c3a:	f7ff fc4b 	bl	80004d4 <MY_SysTick_GetTick>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	60bb      	str	r3, [r7, #8]

				/* Ждём пока RCC не снимет флаг готовности HSI */
				while(MY_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c42:	e008      	b.n	8000c56 <MY_RCC_Osc_Config+0x20a>
				{
					/* Если истёк таймаут - выходим с ошибкой */
					if((MY_SysTick_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c44:	f7ff fc46 	bl	80004d4 <MY_SysTick_GetTick>
 8000c48:	0002      	movs	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <MY_RCC_Osc_Config+0x20a>
					{
						return MY_Result_Timeout;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e1dc      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
				while(MY_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c56:	4b44      	ldr	r3, [pc, #272]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d1f1      	bne.n	8000c44 <MY_RCC_Osc_Config+0x1f8>
	}


	/*------------------------------ Конфигурация LSI ------------------------------*/
	/* Если для настройки выбран осциллятор LSI */
	if(((RCC_Osc_InitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2208      	movs	r2, #8
 8000c66:	4013      	ands	r3, r2
 8000c68:	d036      	beq.n	8000cd8 <MY_RCC_Osc_Config+0x28c>
	{
		/* Проверяем текущее состояние LSI в настройках */
		if(RCC_Osc_InitStruct->LSI_State != RCC_LSI_OFF)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d019      	beq.n	8000ca6 <MY_RCC_Osc_Config+0x25a>
		{
			/* Включаем встроенный Low Speed oscillator (LSI) */
			MY_RCC_LSI_ENABLE();
 8000c72:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c76:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24

			/* Помещаем значение для отчёта таймаута */
			tickstart = MY_SysTick_GetTick();
 8000c7e:	f7ff fc29 	bl	80004d4 <MY_SysTick_GetTick>
 8000c82:	0003      	movs	r3, r0
 8000c84:	60bb      	str	r3, [r7, #8]

			/* Ждём пока RCC не взведёт флаг готовности LSI */
			while(MY_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c86:	e008      	b.n	8000c9a <MY_RCC_Osc_Config+0x24e>
			{
				/* Если истёк таймаут - выходим с ошибкой */
				if((MY_SysTick_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c88:	f7ff fc24 	bl	80004d4 <MY_SysTick_GetTick>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d901      	bls.n	8000c9a <MY_RCC_Osc_Config+0x24e>
				{
					return MY_Result_Timeout;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e1ba      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			while(MY_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	d0f1      	beq.n	8000c88 <MY_RCC_Osc_Config+0x23c>
 8000ca4:	e018      	b.n	8000cd8 <MY_RCC_Osc_Config+0x28c>
			}
		}
		else
		{
			/* Отключаем встроенный Low Speed oscillator (LSI) */
			MY_RCC_LSI_DISABLE();
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	438a      	bics	r2, r1
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24

			/* Помещаем значение для отчёта таймаута */
			tickstart = MY_SysTick_GetTick();
 8000cb2:	f7ff fc0f 	bl	80004d4 <MY_SysTick_GetTick>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	60bb      	str	r3, [r7, #8]

			/* Ждём пока RCC не снимет флаг готовности LSI */
			while(MY_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cba:	e008      	b.n	8000cce <MY_RCC_Osc_Config+0x282>
			{
				/* Если истёк таймаут - выходим с ошибкой */
				if((MY_SysTick_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fc0a 	bl	80004d4 <MY_SysTick_GetTick>
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d901      	bls.n	8000cce <MY_RCC_Osc_Config+0x282>
				{
					return MY_Result_Timeout;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e1a0      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			while(MY_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d1f1      	bne.n	8000cbc <MY_RCC_Osc_Config+0x270>
	}


	/*------------------------------ Конфигурация LSE ------------------------------*/
	/* Если для настройки выбран осциллятор LSE */
	if(((RCC_Osc_InitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2204      	movs	r2, #4
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d100      	bne.n	8000ce4 <MY_RCC_Osc_Config+0x298>
 8000ce2:	e0b1      	b.n	8000e48 <MY_RCC_Osc_Config+0x3fc>
	{
		/* Статус сброса по питанию */
		FlagStatus pwrclkchanged = RESET;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]

		/* Обновляем конфигурацию LSE в регистре Backup Domain control */
		/* Это необходимо для включения доступа на запись в Backup Domain */
		if(MY_RCC_PWR_IS_CLK_DISABLED())
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000cee:	69da      	ldr	r2, [r3, #28]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	055b      	lsls	r3, r3, #21
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d10a      	bne.n	8000d0e <MY_RCC_Osc_Config+0x2c2>
		{
			MY_RCC_PWR_CLK_ENABLE();
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	055b      	lsls	r3, r3, #21
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <MY_RCC_Osc_Config+0x328>)
 8000cfe:	0019      	movs	r1, r3
 8000d00:	0010      	movs	r0, r2
 8000d02:	f000 fae9 	bl	80012d8 <MY_UTILS_SetBitWithRead>
			pwrclkchanged = SET;
 8000d06:	230f      	movs	r3, #15
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
		}

		/* Если бит Disable Backup Domain write protection сброшен*/
		if(IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MY_RCC_Osc_Config+0x32c>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4013      	ands	r3, r2
 8000d18:	d11a      	bne.n	8000d50 <MY_RCC_Osc_Config+0x304>
		{
			/* Разрешаем запись в Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MY_RCC_Osc_Config+0x32c>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MY_RCC_Osc_Config+0x32c>)
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	0049      	lsls	r1, r1, #1
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]

			/* Помещаем значение для отчёта таймаута */
			tickstart = MY_SysTick_GetTick();
 8000d28:	f7ff fbd4 	bl	80004d4 <MY_SysTick_GetTick>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	60bb      	str	r3, [r7, #8]

			/* Ждём когда защита от записи в Backup domain будет снята */
			while((((PWR->CR) & (PWR_CR_DBP)) == RESET))
 8000d30:	e008      	b.n	8000d44 <MY_RCC_Osc_Config+0x2f8>
			{
				/* Если истёк таймаут - выходим с ошибкой */
				if((MY_SysTick_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d32:	f7ff fbcf 	bl	80004d4 <MY_SysTick_GetTick>
 8000d36:	0002      	movs	r2, r0
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b64      	cmp	r3, #100	; 0x64
 8000d3e:	d901      	bls.n	8000d44 <MY_RCC_Osc_Config+0x2f8>
				{
					return MY_Result_Timeout;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e165      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			while((((PWR->CR) & (PWR_CR_DBP)) == RESET))
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MY_RCC_Osc_Config+0x32c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d0f0      	beq.n	8000d32 <MY_RCC_Osc_Config+0x2e6>
				}
			}
		}

		/* Устанавливаем новое состояние LSE */
		MY_RCC_LSE_CONFIG(RCC_Osc_InitStruct->LSE_State);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d111      	bne.n	8000d7c <MY_RCC_Osc_Config+0x330>
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000d5a:	6a1a      	ldr	r2, [r3, #32]
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <MY_RCC_Osc_Config+0x31c>)
 8000d5e:	2101      	movs	r1, #1
 8000d60:	430a      	orrs	r2, r1
 8000d62:	621a      	str	r2, [r3, #32]
 8000d64:	e038      	b.n	8000dd8 <MY_RCC_Osc_Config+0x38c>
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	fffeffff 	.word	0xfffeffff
 8000d70:	fffbffff 	.word	0xfffbffff
 8000d74:	4002101c 	.word	0x4002101c
 8000d78:	40007000 	.word	0x40007000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10c      	bne.n	8000d9e <MY_RCC_Osc_Config+0x352>
 8000d84:	4ba4      	ldr	r3, [pc, #656]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000d86:	6a1a      	ldr	r2, [r3, #32]
 8000d88:	4ba3      	ldr	r3, [pc, #652]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	621a      	str	r2, [r3, #32]
 8000d90:	4ba1      	ldr	r3, [pc, #644]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000d92:	6a1a      	ldr	r2, [r3, #32]
 8000d94:	4ba0      	ldr	r3, [pc, #640]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000d96:	2104      	movs	r1, #4
 8000d98:	438a      	bics	r2, r1
 8000d9a:	621a      	str	r2, [r3, #32]
 8000d9c:	e01c      	b.n	8000dd8 <MY_RCC_Osc_Config+0x38c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d10c      	bne.n	8000dc0 <MY_RCC_Osc_Config+0x374>
 8000da6:	4b9c      	ldr	r3, [pc, #624]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000da8:	6a1a      	ldr	r2, [r3, #32]
 8000daa:	4b9b      	ldr	r3, [pc, #620]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000dac:	2104      	movs	r1, #4
 8000dae:	430a      	orrs	r2, r1
 8000db0:	621a      	str	r2, [r3, #32]
 8000db2:	4b99      	ldr	r3, [pc, #612]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000db4:	6a1a      	ldr	r2, [r3, #32]
 8000db6:	4b98      	ldr	r3, [pc, #608]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000db8:	2101      	movs	r1, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	621a      	str	r2, [r3, #32]
 8000dbe:	e00b      	b.n	8000dd8 <MY_RCC_Osc_Config+0x38c>
 8000dc0:	4b95      	ldr	r3, [pc, #596]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000dc2:	6a1a      	ldr	r2, [r3, #32]
 8000dc4:	4b94      	ldr	r3, [pc, #592]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	438a      	bics	r2, r1
 8000dca:	621a      	str	r2, [r3, #32]
 8000dcc:	4b92      	ldr	r3, [pc, #584]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000dce:	6a1a      	ldr	r2, [r3, #32]
 8000dd0:	4b91      	ldr	r3, [pc, #580]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	438a      	bics	r2, r1
 8000dd6:	621a      	str	r2, [r3, #32]

		/* Проверяем новое состояние LSE */
		if(RCC_Osc_InitStruct->LSE_State != RCC_LSE_OFF)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d014      	beq.n	8000e0a <MY_RCC_Osc_Config+0x3be>
		{
			/* Помещаем значение для отчёта таймаута */
			tickstart = MY_SysTick_GetTick();
 8000de0:	f7ff fb78 	bl	80004d4 <MY_SysTick_GetTick>
 8000de4:	0003      	movs	r3, r0
 8000de6:	60bb      	str	r3, [r7, #8]

			/* Ждём когда не будет взведен флаг готовности LSE */
			while(MY_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de8:	e009      	b.n	8000dfe <MY_RCC_Osc_Config+0x3b2>
			{
				/* Если истёк таймаут - выходим с ошибкой */
				if((MY_SysTick_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dea:	f7ff fb73 	bl	80004d4 <MY_SysTick_GetTick>
 8000dee:	0002      	movs	r2, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	4a89      	ldr	r2, [pc, #548]	; (800101c <MY_RCC_Osc_Config+0x5d0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d901      	bls.n	8000dfe <MY_RCC_Osc_Config+0x3b2>
				{
					return MY_Result_Timeout;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e108      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			while(MY_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dfe:	4b86      	ldr	r3, [pc, #536]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	2202      	movs	r2, #2
 8000e04:	4013      	ands	r3, r2
 8000e06:	d0f0      	beq.n	8000dea <MY_RCC_Osc_Config+0x39e>
 8000e08:	e013      	b.n	8000e32 <MY_RCC_Osc_Config+0x3e6>
			}
		}
		else
		{
			/* Помещаем значение для отчёта таймаута */
			tickstart = MY_SysTick_GetTick();
 8000e0a:	f7ff fb63 	bl	80004d4 <MY_SysTick_GetTick>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	60bb      	str	r3, [r7, #8]

			/* Ждём когда не будет взведен флаг готовности LSE */
			while(MY_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e12:	e009      	b.n	8000e28 <MY_RCC_Osc_Config+0x3dc>
			{
				/* Если истёк таймаут - выходим с ошибкой */
				if((MY_SysTick_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e14:	f7ff fb5e 	bl	80004d4 <MY_SysTick_GetTick>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	4a7f      	ldr	r2, [pc, #508]	; (800101c <MY_RCC_Osc_Config+0x5d0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d901      	bls.n	8000e28 <MY_RCC_Osc_Config+0x3dc>
				{
					return MY_Result_Timeout;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e0f3      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			while(MY_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e28:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d1f0      	bne.n	8000e14 <MY_RCC_Osc_Config+0x3c8>
				}
			}
		}

		/* Требуется отключить тактирование power clock */
		if(pwrclkchanged == SET)
 8000e32:	230f      	movs	r3, #15
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d105      	bne.n	8000e48 <MY_RCC_Osc_Config+0x3fc>
		{
			MY_RCC_PWR_CLK_DISABLE();
 8000e3c:	4b76      	ldr	r3, [pc, #472]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e3e:	69da      	ldr	r2, [r3, #28]
 8000e40:	4b75      	ldr	r3, [pc, #468]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e42:	4977      	ldr	r1, [pc, #476]	; (8001020 <MY_RCC_Osc_Config+0x5d4>)
 8000e44:	400a      	ands	r2, r1
 8000e46:	61da      	str	r2, [r3, #28]
	}


	/*----------------------------- Настройка HSI14 -----------------------------*/
	/* Если для настройки выбран осциллятор HSI14 */
	if(((RCC_Osc_InitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2210      	movs	r2, #16
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d063      	beq.n	8000f1a <MY_RCC_Osc_Config+0x4ce>
	{
		/* Проверка текущего состояния HSI14 в настройках */
		if(RCC_Osc_InitStruct->HSI14_State == RCC_HSI14_ON)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d12a      	bne.n	8000eb0 <MY_RCC_Osc_Config+0x464>
		{
			/* Отключаем ADC control для HSI14 */
			MY_RCC_HSI14ADC_DISABLE();
 8000e5a:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e5e:	4b6e      	ldr	r3, [pc, #440]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e60:	2104      	movs	r1, #4
 8000e62:	430a      	orrs	r2, r1
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34

			/* Включаем HSI14 */
			MY_RCC_HSI14_ENABLE();
 8000e66:	4b6c      	ldr	r3, [pc, #432]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e6a:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34

			/* Помещаем значение для отчёта таймаута */
			tickstart = MY_SysTick_GetTick();
 8000e72:	f7ff fb2f 	bl	80004d4 <MY_SysTick_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	60bb      	str	r3, [r7, #8]

			/* Ждём когда не будет взведен флаг готовности HSI14 */
			while(MY_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <MY_RCC_Osc_Config+0x442>
			{
				/* Если истёк таймаут - выходим с ошибкой */
				if((MY_SysTick_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e7c:	f7ff fb2a 	bl	80004d4 <MY_SysTick_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <MY_RCC_Osc_Config+0x442>
				{
					return MY_Result_Timeout;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e0c0      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			while(MY_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e8e:	4b62      	ldr	r3, [pc, #392]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e92:	2202      	movs	r2, #2
 8000e94:	4013      	ands	r3, r2
 8000e96:	d0f1      	beq.n	8000e7c <MY_RCC_Osc_Config+0x430>
				}
			}

			/* Подстраиваем калибровочное значение для Internal High Speed oscillator 14Mhz (HSI14) */
			MY_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_Osc_InitStruct->HSI14_CalibrationValue);
 8000e98:	4b5f      	ldr	r3, [pc, #380]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	22f8      	movs	r2, #248	; 0xf8
 8000e9e:	4393      	bics	r3, r2
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	00da      	lsls	r2, r3, #3
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
 8000eae:	e034      	b.n	8000f1a <MY_RCC_Osc_Config+0x4ce>
		}
		else if(RCC_Osc_InitStruct->HSI14_State == RCC_HSI14_ADC_CONTROL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	3305      	adds	r3, #5
 8000eb6:	d111      	bne.n	8000edc <MY_RCC_Osc_Config+0x490>
		{
			/* Включаем ADC для Internal High Speed oscillator HSI14 */
			MY_RCC_HSI14ADC_ENABLE();
 8000eb8:	4b57      	ldr	r3, [pc, #348]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ebc:	4b56      	ldr	r3, [pc, #344]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	438a      	bics	r2, r1
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34

			/* Подстраиваем калибровочное значение для Internal High Speed oscillator 14Mhz (HSI14) */
			MY_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_Osc_InitStruct->HSI14_CalibrationValue);
 8000ec4:	4b54      	ldr	r3, [pc, #336]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec8:	22f8      	movs	r2, #248	; 0xf8
 8000eca:	4393      	bics	r3, r2
 8000ecc:	0019      	movs	r1, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	00da      	lsls	r2, r3, #3
 8000ed4:	4b50      	ldr	r3, [pc, #320]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eda:	e01e      	b.n	8000f1a <MY_RCC_Osc_Config+0x4ce>
		}
		else
		{
			/* Отключаем ADC control для HSI14 */
			MY_RCC_HSI14ADC_DISABLE();
 8000edc:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee0:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34

			/* Отключаем HSI14 */
			MY_RCC_HSI14_DISABLE();
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	438a      	bics	r2, r1
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34

			/* Помещаем значение для отчёта таймаута */
			tickstart = MY_SysTick_GetTick();
 8000ef4:	f7ff faee 	bl	80004d4 <MY_SysTick_GetTick>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	60bb      	str	r3, [r7, #8]

			/* Ждём когда не будет снят флаг готовности HSI14 */
			while(MY_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000efc:	e008      	b.n	8000f10 <MY_RCC_Osc_Config+0x4c4>
			{
				/* Если истёк таймаут - выходим с ошибкой */
				if((MY_SysTick_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000efe:	f7ff fae9 	bl	80004d4 <MY_SysTick_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <MY_RCC_Osc_Config+0x4c4>
				{
					return MY_Result_Timeout;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e07f      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
			while(MY_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f10:	4b41      	ldr	r3, [pc, #260]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f14:	2202      	movs	r2, #2
 8000f16:	4013      	ands	r3, r2
 8000f18:	d1f1      	bne.n	8000efe <MY_RCC_Osc_Config+0x4b2>
	}
	#endif

	/*-------------------------------- Настройка PLL --------------------------------*/
	/* Если в качестве настраиваемого осциллятора выбран PLL */
	if ((RCC_Osc_InitStruct->PLL.PLL_State) != RCC_PLL_NONE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <MY_RCC_Osc_Config+0x4d8>
 8000f22:	e074      	b.n	800100e <MY_RCC_Osc_Config+0x5c2>
	{
		/* Проверяем, является ли PLL источником системного тактирования или нет*/
		if(MY_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f24:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	220c      	movs	r2, #12
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d100      	bne.n	8000f32 <MY_RCC_Osc_Config+0x4e6>
 8000f30:	e06b      	b.n	800100a <MY_RCC_Osc_Config+0x5be>
		{
			/* Если в структуре PLL запущен */
			if((RCC_Osc_InitStruct->PLL.PLL_State) == RCC_PLL_ON)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d14c      	bne.n	8000fd4 <MY_RCC_Osc_Config+0x588>
			{
				/* Сначана отключаем PLL */
				MY_RCC_PLL_DISABLE();
 8000f3a:	4b37      	ldr	r3, [pc, #220]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f40:	4938      	ldr	r1, [pc, #224]	; (8001024 <MY_RCC_Osc_Config+0x5d8>)
 8000f42:	400a      	ands	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]

				/* Помещаем значение для отчёта таймаута */
				tickstart = MY_SysTick_GetTick();
 8000f46:	f7ff fac5 	bl	80004d4 <MY_SysTick_GetTick>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	60bb      	str	r3, [r7, #8]

				/* Ждём когда не будет снят флаг готовности PLL */
				while(MY_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4e:	e008      	b.n	8000f62 <MY_RCC_Osc_Config+0x516>
				{
					/* Если истёк таймаут - выходим с ошибкой */
					if((MY_SysTick_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f50:	f7ff fac0 	bl	80004d4 <MY_SysTick_GetTick>
 8000f54:	0002      	movs	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <MY_RCC_Osc_Config+0x516>
					{
						return MY_Result_Timeout;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e056      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
				while(MY_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	049b      	lsls	r3, r3, #18
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d1f0      	bne.n	8000f50 <MY_RCC_Osc_Config+0x504>
					}
				}

				/* Настраиваем тактирование PLL, предделитель и умножитель */
				MY_RCC_PLL_CONFIG(RCC_Osc_InitStruct->PLL.PLL_Source, RCC_Osc_InitStruct->PLL.PLL_PREDIV, RCC_Osc_InitStruct->PLL.PLL_MUL);
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	220f      	movs	r2, #15
 8000f74:	4393      	bics	r3, r2
 8000f76:	0019      	movs	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	4a28      	ldr	r2, [pc, #160]	; (8001028 <MY_RCC_Osc_Config+0x5dc>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	431a      	orrs	r2, r3
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	605a      	str	r2, [r3, #4]

				/* Включаем PLL обратно */
				MY_RCC_PLL_ENABLE();
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	0449      	lsls	r1, r1, #17
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]

				/* Помещаем значение для отчёта таймаута */
				tickstart = MY_SysTick_GetTick();
 8000faa:	f7ff fa93 	bl	80004d4 <MY_SysTick_GetTick>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	60bb      	str	r3, [r7, #8]

				/* Ждём когда не будет взведен флаг готовности PLL */
				while(MY_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <MY_RCC_Osc_Config+0x57a>
				{
					/* Если истёк таймаут - выходим с ошибкой */
					if((MY_SysTick_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb4:	f7ff fa8e 	bl	80004d4 <MY_SysTick_GetTick>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <MY_RCC_Osc_Config+0x57a>
					{
						return MY_Result_Timeout;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e024      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
				while(MY_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	049b      	lsls	r3, r3, #18
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d0f0      	beq.n	8000fb4 <MY_RCC_Osc_Config+0x568>
 8000fd2:	e01c      	b.n	800100e <MY_RCC_Osc_Config+0x5c2>
				}
			}
			else
			{
				/* Отключаем PLL */
				MY_RCC_PLL_DISABLE();
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000fda:	4912      	ldr	r1, [pc, #72]	; (8001024 <MY_RCC_Osc_Config+0x5d8>)
 8000fdc:	400a      	ands	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]

				/* Помещаем значение для отчёта таймаута */
				tickstart = MY_SysTick_GetTick();
 8000fe0:	f7ff fa78 	bl	80004d4 <MY_SysTick_GetTick>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	60bb      	str	r3, [r7, #8]

				/* Ждём когда не будет снят флаг готовности PLL */
				while(MY_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe8:	e008      	b.n	8000ffc <MY_RCC_Osc_Config+0x5b0>
				{
					/* Если истёк таймаут - выходим с ошибкой */
					if((MY_SysTick_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fea:	f7ff fa73 	bl	80004d4 <MY_SysTick_GetTick>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <MY_RCC_Osc_Config+0x5b0>
					{
						return MY_Result_Timeout;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e009      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
				while(MY_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MY_RCC_Osc_Config+0x5cc>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	049b      	lsls	r3, r3, #18
 8001004:	4013      	ands	r3, r2
 8001006:	d1f0      	bne.n	8000fea <MY_RCC_Osc_Config+0x59e>
 8001008:	e001      	b.n	800100e <MY_RCC_Osc_Config+0x5c2>
				}
			}
		}
		else
		{
			return MY_Result_Error;
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <MY_RCC_Osc_Config+0x5c4>
		}
	}

	return MY_Result_Ok;
 800100e:	2300      	movs	r3, #0
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	b004      	add	sp, #16
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	00001388 	.word	0x00001388
 8001020:	efffffff 	.word	0xefffffff
 8001024:	feffffff 	.word	0xfeffffff
 8001028:	ffc2ffff 	.word	0xffc2ffff

0800102c <MY_RCC_Clock_Config>:


MY_Result_t MY_RCC_Clock_Config(MY_RCC_Clock_Init_t *RCC_Clock_InitStruct, uint32_t FlashLatency)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	/* Переменная используемая для отсчёта таймаутов */
	uint32_t tickstart = 0U;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]

	/* Для корректного чтения данных с FLASH памяти, число периодов ожидания (LATENCY)
	   должно быть корректно установлено в соответствии с частотой CPU (HCLK) на используемом МК.
	   Увеличивается количество периодов ожидания при использовании высокой частоты CPU (от 24MHz) */
	if(FLASH_LATENCY > (FLASH->ACR & FLASH_ACR_LATENCY))
 800103a:	4b6a      	ldr	r3, [pc, #424]	; (80011e4 <MY_RCC_Clock_Config+0x1b8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2201      	movs	r2, #1
 8001040:	4013      	ands	r3, r2
 8001042:	d110      	bne.n	8001066 <MY_RCC_Clock_Config+0x3a>
	{
		/* Записываем новое количество периодов ожидания в бит LATENCY в регистре FLASH_ACR */
		FLASH->ACR = (FLASH->ACR&(~FLASH_ACR_LATENCY)) | (FlashLatency);
 8001044:	4b67      	ldr	r3, [pc, #412]	; (80011e4 <MY_RCC_Clock_Config+0x1b8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2201      	movs	r2, #1
 800104a:	4393      	bics	r3, r2
 800104c:	0019      	movs	r1, r3
 800104e:	4b65      	ldr	r3, [pc, #404]	; (80011e4 <MY_RCC_Clock_Config+0x1b8>)
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]

		/* Проверяем установилось ли значение в поле LATENCY в регистре FLASH_ACR */
		if((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_LATENCY)
 8001056:	4b63      	ldr	r3, [pc, #396]	; (80011e4 <MY_RCC_Clock_Config+0x1b8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2201      	movs	r2, #1
 800105c:	4013      	ands	r3, r2
 800105e:	2b01      	cmp	r3, #1
 8001060:	d001      	beq.n	8001066 <MY_RCC_Clock_Config+0x3a>
		{
			return MY_Result_Error;
 8001062:	2301      	movs	r3, #1
 8001064:	e0ba      	b.n	80011dc <MY_RCC_Clock_Config+0x1b0>
		}
	}


	/*-------------------------- Настройка HCLK --------------------------*/
	if(((RCC_Clock_InitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2202      	movs	r2, #2
 800106c:	4013      	ands	r3, r2
 800106e:	d009      	beq.n	8001084 <MY_RCC_Clock_Config+0x58>
	{
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_Clock_InitStruct->AHBCLK_Divider);
 8001070:	4b5d      	ldr	r3, [pc, #372]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	22f0      	movs	r2, #240	; 0xf0
 8001076:	4393      	bics	r3, r2
 8001078:	0019      	movs	r1, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	4b5a      	ldr	r3, [pc, #360]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 8001080:	430a      	orrs	r2, r1
 8001082:	605a      	str	r2, [r3, #4]
	}


	/*------------------------- Настройка SYSCLK ---------------------------*/
	if(((RCC_Clock_InitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2201      	movs	r2, #1
 800108a:	4013      	ands	r3, r2
 800108c:	d100      	bne.n	8001090 <MY_RCC_Clock_Config+0x64>
 800108e:	e067      	b.n	8001160 <MY_RCC_Clock_Config+0x134>
	{
		/* Если HSE выбран как System Clock Source */
		if(RCC_Clock_InitStruct->SYSCLK_Source == RCC_SYSCLK_SOURCE_HSE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d107      	bne.n	80010a8 <MY_RCC_Clock_Config+0x7c>
		{
			/* Проверяем установлен ли флаг HSE ready */
			if(MY_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001098:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	4013      	ands	r3, r2
 80010a2:	d114      	bne.n	80010ce <MY_RCC_Clock_Config+0xa2>
			{
				return MY_Result_Error;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e099      	b.n	80011dc <MY_RCC_Clock_Config+0x1b0>
			}
		}
		/* Если PLL выбран как System Clock Source */
		else if(RCC_Clock_InitStruct->SYSCLK_Source == RCC_SYSCLK_SOURCE_PLL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d107      	bne.n	80010c0 <MY_RCC_Clock_Config+0x94>
		{
			/* Проверяем установлен ли флаг PLL ready */
			if(MY_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b0:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2380      	movs	r3, #128	; 0x80
 80010b6:	049b      	lsls	r3, r3, #18
 80010b8:	4013      	ands	r3, r2
 80010ba:	d108      	bne.n	80010ce <MY_RCC_Clock_Config+0xa2>
			{
				return MY_Result_Error;
 80010bc:	2301      	movs	r3, #1
 80010be:	e08d      	b.n	80011dc <MY_RCC_Clock_Config+0x1b0>

		/* Если HSI выбран как System Clock Source */
		else
		{
			/* Проверяем установлен ли HSI ready */
			if(MY_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	4b49      	ldr	r3, [pc, #292]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2202      	movs	r2, #2
 80010c6:	4013      	ands	r3, r2
 80010c8:	d101      	bne.n	80010ce <MY_RCC_Clock_Config+0xa2>
			{
				return MY_Result_Error;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e086      	b.n	80011dc <MY_RCC_Clock_Config+0x1b0>
			}
		}

		/* Устанавливаем выбранный источник System Clock Source */
		MY_RCC_SYSCLK_CONFIG(RCC_Clock_InitStruct->SYSCLK_Source);
 80010ce:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	4393      	bics	r3, r2
 80010d6:	0019      	movs	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]


		/* Получаем значение для вычисления таймаута на выполнение */
		tickstart = MY_SysTick_GetTick();
 80010e2:	f7ff f9f7 	bl	80004d4 <MY_SysTick_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]

		/* Проверяем, установилось ли значение в регистре */
		if(RCC_Clock_InitStruct->SYSCLK_Source == RCC_SYSCLK_SOURCE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d111      	bne.n	8001116 <MY_RCC_Clock_Config+0xea>
		{
			while (MY_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f2:	e009      	b.n	8001108 <MY_RCC_Clock_Config+0xdc>
			{
				if((MY_SysTick_GetTick() - tickstart ) > (5000U))
 80010f4:	f7ff f9ee 	bl	80004d4 <MY_SysTick_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	4a3b      	ldr	r2, [pc, #236]	; (80011ec <MY_RCC_Clock_Config+0x1c0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d901      	bls.n	8001108 <MY_RCC_Clock_Config+0xdc>
				{
					return MY_Result_Timeout;
 8001104:	2303      	movs	r3, #3
 8001106:	e069      	b.n	80011dc <MY_RCC_Clock_Config+0x1b0>
			while (MY_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001108:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b04      	cmp	r3, #4
 8001112:	d1ef      	bne.n	80010f4 <MY_RCC_Clock_Config+0xc8>
 8001114:	e024      	b.n	8001160 <MY_RCC_Clock_Config+0x134>
				}
			}
		}
		else if(RCC_Clock_InitStruct->SYSCLK_Source == RCC_SYSCLK_SOURCE_PLL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d11b      	bne.n	8001156 <MY_RCC_Clock_Config+0x12a>
		{
			while (MY_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800111e:	e009      	b.n	8001134 <MY_RCC_Clock_Config+0x108>
			{
				if((MY_SysTick_GetTick() - tickstart ) > (5000U))
 8001120:	f7ff f9d8 	bl	80004d4 <MY_SysTick_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a30      	ldr	r2, [pc, #192]	; (80011ec <MY_RCC_Clock_Config+0x1c0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <MY_RCC_Clock_Config+0x108>
				{
					return MY_Result_Timeout;
 8001130:	2303      	movs	r3, #3
 8001132:	e053      	b.n	80011dc <MY_RCC_Clock_Config+0x1b0>
			while (MY_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	220c      	movs	r2, #12
 800113a:	4013      	ands	r3, r2
 800113c:	2b08      	cmp	r3, #8
 800113e:	d1ef      	bne.n	8001120 <MY_RCC_Clock_Config+0xf4>
 8001140:	e00e      	b.n	8001160 <MY_RCC_Clock_Config+0x134>

		else
		{
			while (MY_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
			{
				if((MY_SysTick_GetTick() - tickstart ) > (5000U))
 8001142:	f7ff f9c7 	bl	80004d4 <MY_SysTick_GetTick>
 8001146:	0002      	movs	r2, r0
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <MY_RCC_Clock_Config+0x1c0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <MY_RCC_Clock_Config+0x12a>
				{
					return MY_Result_Timeout;
 8001152:	2303      	movs	r3, #3
 8001154:	e042      	b.n	80011dc <MY_RCC_Clock_Config+0x1b0>
			while (MY_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	220c      	movs	r2, #12
 800115c:	4013      	ands	r3, r2
 800115e:	d1f0      	bne.n	8001142 <MY_RCC_Clock_Config+0x116>
			}
		}
	}

	/* Если используется частота <24МГц - записываем значение предвыборки */
	if(FLASH_LATENCY < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MY_RCC_Clock_Config+0x1b8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2201      	movs	r2, #1
 8001166:	4013      	ands	r3, r2
 8001168:	2b01      	cmp	r3, #1
 800116a:	d90d      	bls.n	8001188 <MY_RCC_Clock_Config+0x15c>
	{
		/* Записываем новое значение LATENCY в регистр FLASH_ACR */
		FLASH->ACR = (FLASH->ACR&(~FLASH_ACR_LATENCY)) | (FLASH_LATENCY);
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MY_RCC_Clock_Config+0x1b8>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MY_RCC_Clock_Config+0x1b8>)
 8001172:	2101      	movs	r1, #1
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

		/* Проверяем установилось ли значение в регистре */
		if((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_LATENCY)
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MY_RCC_Clock_Config+0x1b8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	4013      	ands	r3, r2
 8001180:	2b01      	cmp	r3, #1
 8001182:	d001      	beq.n	8001188 <MY_RCC_Clock_Config+0x15c>
		{
			return MY_Result_Error;
 8001184:	2301      	movs	r3, #1
 8001186:	e029      	b.n	80011dc <MY_RCC_Clock_Config+0x1b0>
		}
	}


	/*-------------------------- Настройка PCLK1  ---------------------------*/
	if(((RCC_Clock_InitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2204      	movs	r2, #4
 800118e:	4013      	ands	r3, r2
 8001190:	d009      	beq.n	80011a6 <MY_RCC_Clock_Config+0x17a>
	{
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_Clock_InitStruct->APB1CLK_Divider);
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <MY_RCC_Clock_Config+0x1c4>)
 8001198:	4013      	ands	r3, r2
 800119a:	0019      	movs	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]
	}

	/* Обновляем значение глобальной переменной SystemCoreClock */
	SystemCoreClock = MY_RCC_SysClock_GetFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011a6:	f000 f829 	bl	80011fc <MY_RCC_SysClock_GetFreq>
 80011aa:	0001      	movs	r1, r0
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MY_RCC_Clock_Config+0x1bc>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	220f      	movs	r2, #15
 80011b4:	4013      	ands	r3, r2
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <MY_RCC_Clock_Config+0x1c8>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	000a      	movs	r2, r1
 80011bc:	40da      	lsrs	r2, r3
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MY_RCC_Clock_Config+0x1cc>)
 80011c0:	601a      	str	r2, [r3, #0]

	/* Устанавливаем значение для SysTick таймера, чтобы получить ровно 1 мс. */
	MY_SysTick_Init(SystemCoreClock/1000U, 0U);
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MY_RCC_Clock_Config+0x1cc>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	23fa      	movs	r3, #250	; 0xfa
 80011c8:	0099      	lsls	r1, r3, #2
 80011ca:	0010      	movs	r0, r2
 80011cc:	f7fe ff9c 	bl	8000108 <__udivsi3>
 80011d0:	0003      	movs	r3, r0
 80011d2:	2100      	movs	r1, #0
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff f93b 	bl	8000450 <MY_SysTick_Init>

	return MY_Result_Ok;
 80011da:	2300      	movs	r3, #0

}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b004      	add	sp, #16
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40022000 	.word	0x40022000
 80011e8:	40021000 	.word	0x40021000
 80011ec:	00001388 	.word	0x00001388
 80011f0:	fffff8ff 	.word	0xfffff8ff
 80011f4:	08001480 	.word	0x08001480
 80011f8:	20000000 	.word	0x20000000

080011fc <MY_RCC_SysClock_GetFreq>:

}


uint32_t MY_RCC_SysClock_GetFreq(void)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b08f      	sub	sp, #60	; 0x3c
 8001200:	af00      	add	r7, sp, #0
	const uint8_t PLLMULFactorTable[16] = { 2U, 3U, 4U, 5U, 6U, 7U, 8U, 9U, 10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
 8001202:	2314      	movs	r3, #20
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	4a2b      	ldr	r2, [pc, #172]	; (80012b4 <MY_RCC_SysClock_GetFreq+0xb8>)
 8001208:	ca13      	ldmia	r2!, {r0, r1, r4}
 800120a:	c313      	stmia	r3!, {r0, r1, r4}
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	601a      	str	r2, [r3, #0]
	const uint8_t PLLPREDIVFactorTable[16] = { 1U, 2U, 3U, 4U, 5U, 6U, 7U, 8U, 9U,  10U, 11U, 12U, 13U, 14U, 15U, 16U};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <MY_RCC_SysClock_GetFreq+0xbc>)
 8001214:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001216:	c313      	stmia	r3!, {r0, r1, r4}
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	601a      	str	r2, [r3, #0]

	uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t sysclockfreq = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	; 0x30

	tmpreg = RCC->CFGR;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <MY_RCC_SysClock_GetFreq+0xc0>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (tmpreg & RCC_CFGR_SWS)
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	220c      	movs	r2, #12
 800123a:	4013      	ands	r3, r2
 800123c:	2b04      	cmp	r3, #4
 800123e:	d002      	beq.n	8001246 <MY_RCC_SysClock_GetFreq+0x4a>
 8001240:	2b08      	cmp	r3, #8
 8001242:	d003      	beq.n	800124c <MY_RCC_SysClock_GetFreq+0x50>
 8001244:	e02d      	b.n	80012a2 <MY_RCC_SysClock_GetFreq+0xa6>
	{
		case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
		{
			sysclockfreq = HSE_VALUE;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MY_RCC_SysClock_GetFreq+0xc4>)
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 800124a:	e02d      	b.n	80012a8 <MY_RCC_SysClock_GetFreq+0xac>
		}
		case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
		{
			pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124e:	0c9b      	lsrs	r3, r3, #18
 8001250:	220f      	movs	r2, #15
 8001252:	4013      	ands	r3, r2
 8001254:	2214      	movs	r2, #20
 8001256:	18ba      	adds	r2, r7, r2
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
			prediv = PLLPREDIVFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MY_RCC_SysClock_GetFreq+0xc0>)
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	220f      	movs	r2, #15
 8001262:	4013      	ands	r3, r2
 8001264:	1d3a      	adds	r2, r7, #4
 8001266:	5cd3      	ldrb	r3, [r2, r3]
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28

			if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800126a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	4013      	ands	r3, r2
 8001272:	d009      	beq.n	8001288 <MY_RCC_SysClock_GetFreq+0x8c>
			{
				/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
				pllclk = (HSE_VALUE / prediv) * pllmul;
 8001274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001276:	4812      	ldr	r0, [pc, #72]	; (80012c0 <MY_RCC_SysClock_GetFreq+0xc4>)
 8001278:	f7fe ff46 	bl	8000108 <__udivsi3>
 800127c:	0003      	movs	r3, r0
 800127e:	001a      	movs	r2, r3
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	4353      	muls	r3, r2
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
 8001286:	e009      	b.n	800129c <MY_RCC_SysClock_GetFreq+0xa0>
					pllclk = (HSI_VALUE / prediv) * pllmul;

				#else

					/* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
					pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800128a:	000a      	movs	r2, r1
 800128c:	0152      	lsls	r2, r2, #5
 800128e:	1a52      	subs	r2, r2, r1
 8001290:	0193      	lsls	r3, r2, #6
 8001292:	1a9b      	subs	r3, r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	185b      	adds	r3, r3, r1
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	637b      	str	r3, [r7, #52]	; 0x34

				#endif

			}

			sysclockfreq = pllclk;
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	633b      	str	r3, [r7, #48]	; 0x30

			break;
 80012a0:	e002      	b.n	80012a8 <MY_RCC_SysClock_GetFreq+0xac>
		case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */


		default: /* HSI used as system clock */
		{
			sysclockfreq = HSI_VALUE;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MY_RCC_SysClock_GetFreq+0xc4>)
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80012a6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return sysclockfreq;
 80012a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b00f      	add	sp, #60	; 0x3c
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	08001460 	.word	0x08001460
 80012b8:	08001470 	.word	0x08001470
 80012bc:	40021000 	.word	0x40021000
 80012c0:	007a1200 	.word	0x007a1200

080012c4 <MY_RCC_HCLK_GetFreq>:


uint32_t MY_RCC_HCLK_GetFreq(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <MY_RCC_HCLK_GetFreq+0x10>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	20000000 	.word	0x20000000

080012d8 <MY_UTILS_SetBitWithRead>:

#include "my_stm32f0xx_utils.h"

/* Вариант с передачей указателя в котором хранится адрес регистра */
MY_Result_t MY_UTILS_SetBitWithRead(volatile uint32_t *SetToRegister, uint32_t Value)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	uint32_t tmpreg;

	do {
		*SetToRegister |= Value;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]

		/* Читаем для проверки */
		tmpreg = *SetToRegister & Value;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]

		if(Value == tmpreg)
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d101      	bne.n	8001304 <MY_UTILS_SetBitWithRead+0x2c>
		{
			return MY_Result_Ok;
 8001300:	2300      	movs	r3, #0
 8001302:	e000      	b.n	8001306 <MY_UTILS_SetBitWithRead+0x2e>
		}
		else
		{
		return MY_Result_Error;
 8001304:	2301      	movs	r3, #1
		}
    }
	while(0);
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <NMI_Handler>:
/*            Cortex-M0 Processor Exceptions Handlers                         */
/******************************************************************************/


void NMI_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	/* Check RCC CSS flag */
	if(MY_RCC_GET_IT(RCC_IT_CSS))
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <NMI_Handler+0x1c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	4013      	ands	r3, r2
 800131c:	2b80      	cmp	r3, #128	; 0x80
 800131e:	d102      	bne.n	8001326 <NMI_Handler+0x16>
	{
		/* RCC Clock Security System interrupt user callback */
		/*<! User code here > */

		/* Clear RCC CSS pending bit */
		MY_RCC_CLEAR_IT(RCC_IT_CSS);
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <NMI_Handler+0x20>)
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	701a      	strb	r2, [r3, #0]
	}
}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	4002100a 	.word	0x4002100a

08001334 <HardFault_Handler>:


void HardFault_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 8001338:	e7fe      	b.n	8001338 <HardFault_Handler+0x4>

0800133a <SVC_Handler>:
	}
}


void SVC_Handler(void)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	af00      	add	r7, sp, #0

}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <PendSV_Handler>:


void PendSV_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <SysTick_Handler>:


void SysTick_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
	MY_SysTick_IncTick();
 8001352:	f7ff f8b3 	bl	80004bc <MY_SysTick_IncTick>
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <main>:
#include "my_stm32f0xx.h"
#include "my_stm32f0xx_gpio.h"
#include "my_stm32f0xx_delay.h"

int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
	MY_GPIO_Init_t GPIO_Leds;
	GPIO_Leds.Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	22c0      	movs	r2, #192	; 0xc0
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	601a      	str	r2, [r3, #0]
	GPIO_Leds.Mode = MY_GPIO_Mode_Out;
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2201      	movs	r2, #1
 800136e:	605a      	str	r2, [r3, #4]
	GPIO_Leds.Pull = MY_GPIO_PuPd_NoPull;
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
	GPIO_Leds.Speed = MY_GPIO_Speed_High;
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2203      	movs	r2, #3
 800137a:	60da      	str	r2, [r3, #12]

	MY_GPIO_StructInit(GPIOC, &GPIO_Leds);
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <main+0x4c>)
 8001380:	0019      	movs	r1, r3
 8001382:	0010      	movs	r0, r2
 8001384:	f7ff f925 	bl	80005d2 <MY_GPIO_StructInit>

	while(1)
	{
		/* Зажигаем светодиод PC8, гасим PC9 */
		MY_GPIO_SetPinHigh(GPIOC, GPIO_Pin_9);
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <main+0x4c>)
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	619a      	str	r2, [r3, #24]
		MY_Delay_ms(100);
 8001390:	2064      	movs	r0, #100	; 0x64
 8001392:	f7ff f8d8 	bl	8000546 <MY_Delay_ms>

		/* Зажигаем светодиод PC9, гасим PC8 */
		MY_GPIO_SetPinLow(GPIOC, GPIO_Pin_9);
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <main+0x4c>)
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	0492      	lsls	r2, r2, #18
 800139c:	619a      	str	r2, [r3, #24]
		MY_Delay_ms(100);
 800139e:	2064      	movs	r0, #100	; 0x64
 80013a0:	f7ff f8d1 	bl	8000546 <MY_Delay_ms>
		MY_GPIO_SetPinHigh(GPIOC, GPIO_Pin_9);
 80013a4:	e7f0      	b.n	8001388 <main+0x2c>
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	48000800 	.word	0x48000800

080013ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490e      	ldr	r1, [pc, #56]	; (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0b      	ldr	r4, [pc, #44]	; (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl MY_System_Init
 80013d6:	f7fe ff23 	bl	8000220 <MY_System_Init>
/* Call static constructors */
  bl __libc_init_array
 80013da:	f000 f811 	bl	8001400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013de:	f7ff ffbd 	bl	800135c <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   r0, =_estack
 80013e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80013f0:	08001498 	.word	0x08001498
  ldr r2, =_sbss
 80013f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80013f8:	20000030 	.word	0x20000030

080013fc <ADC_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC_COMP_IRQHandler>
	...

08001400 <__libc_init_array>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	2600      	movs	r6, #0
 8001404:	4d0c      	ldr	r5, [pc, #48]	; (8001438 <__libc_init_array+0x38>)
 8001406:	4c0d      	ldr	r4, [pc, #52]	; (800143c <__libc_init_array+0x3c>)
 8001408:	1b64      	subs	r4, r4, r5
 800140a:	10a4      	asrs	r4, r4, #2
 800140c:	42a6      	cmp	r6, r4
 800140e:	d109      	bne.n	8001424 <__libc_init_array+0x24>
 8001410:	2600      	movs	r6, #0
 8001412:	f000 f819 	bl	8001448 <_init>
 8001416:	4d0a      	ldr	r5, [pc, #40]	; (8001440 <__libc_init_array+0x40>)
 8001418:	4c0a      	ldr	r4, [pc, #40]	; (8001444 <__libc_init_array+0x44>)
 800141a:	1b64      	subs	r4, r4, r5
 800141c:	10a4      	asrs	r4, r4, #2
 800141e:	42a6      	cmp	r6, r4
 8001420:	d105      	bne.n	800142e <__libc_init_array+0x2e>
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	00b3      	lsls	r3, r6, #2
 8001426:	58eb      	ldr	r3, [r5, r3]
 8001428:	4798      	blx	r3
 800142a:	3601      	adds	r6, #1
 800142c:	e7ee      	b.n	800140c <__libc_init_array+0xc>
 800142e:	00b3      	lsls	r3, r6, #2
 8001430:	58eb      	ldr	r3, [r5, r3]
 8001432:	4798      	blx	r3
 8001434:	3601      	adds	r6, #1
 8001436:	e7f2      	b.n	800141e <__libc_init_array+0x1e>
 8001438:	08001490 	.word	0x08001490
 800143c:	08001490 	.word	0x08001490
 8001440:	08001490 	.word	0x08001490
 8001444:	08001494 	.word	0x08001494

08001448 <_init>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144e:	bc08      	pop	{r3}
 8001450:	469e      	mov	lr, r3
 8001452:	4770      	bx	lr

08001454 <_fini>:
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800145a:	bc08      	pop	{r3}
 800145c:	469e      	mov	lr, r3
 800145e:	4770      	bx	lr
